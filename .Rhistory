check()
check()
check()
check()
check()
document()
check()
check()
filter(df1, !is.na(sym(y_var)))
library(rlang)
?sym
sym("")
check()
warnings()
warnings()
check()
sym("")
rlang::sym("")
rlang::sym("t")
sym("t")
check()
check()
plot_curves_faceted(data, 16, x_var = "Generation", y_var = "MeanBirthRate")
check()
fname <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May14thBetterMalloc/output_genotype_properties.dat"
geno_props <- read_delim_special(fname)
View(geno_props)
plot(AlleleCount ~ OriginTime, data = geno_props)
plot(AlleleCount ~ OriginTime, data = filter(geno_props, Allele_Count > 0))
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0))
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0), log = "y")
plot(1 / AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0), log = "y")
plot(1 / AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0))
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0))
May14thBigK_data <- read.csv("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May14thBigK/data.csv", guess_max = 1E4)
?read.csv
May14thBigK_data <- read_csv("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May14thBigK/data.csv", guess_max = 1E4)
library(readr)
May14thBigK_data <- read_csv("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May14thBigK/data.csv", guess_max = 1E4)
fname <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May14thBigK/output_genotype_properties.dat"
geno_props <- read_delim_special(fname)
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0))
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0), log = "xy")
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0), log = "x")
plot(AlleleCount ~ OriginTime, data = filter(geno_props, AlleleCount > 0))
plot(AlleleCount ~ BirthRate, data = filter(geno_props, AlleleCount > 0))
ggplot(geno_props, aes(BirthRate, AlleleCount)) + geom_point()
ggplot(geno_props, aes(BirthRate, OriginTime, colour = AlleleCount)) + geom_point()
ggplot(filter(geno_props, AlleleCount > 0), aes(BirthRate, OriginTime, colour = log10(AlleleCount))) + geom_point()
ggplot(filter(geno_props, AlleleCount > 0), aes(BirthRate, OriginTime, size = log10(AlleleCount))) + geom_point()
ggplot(filter(geno_props, AlleleCount > 0), aes(BirthRate, OriginTime, size = log10(AlleleCount))) + geom_point(colour = "#00000050")
ggplot(filter(geno_props, AlleleCount > 0), aes(BirthRate, OriginTime, size = AlleleCount / 1e5)) + geom_point(colour = "#00000050")
ggplot(filter(geno_props, AlleleCount > 0), aes(BirthRate, OriginTime, size = AlleleCount / 1e5, colour = log10(AlleleCount))) + geom_point(colour = "#00000050")
ggplot(filter(geno_props, AlleleCount > 0), aes(BirthRate, OriginTime, size = AlleleCount / 1e5, colour = log10(AlleleCount))) + geom_point()
ggplot(filter(geno_props, AlleleCount > 0), aes(OriginTime, AlleleCount, size = BirthRate, colour = log10(BirthRate))) + geom_point()
ggplot(filter(geno_props, AlleleCount > 0), aes(OriginTime, AlleleCount, size = BirthRate, colour = log10(BirthRate))) + geom_point(alpha = 0.5)
ggplot(filter(geno_props, AlleleCount > 0), aes(OriginTime, AlleleCount, size = BirthRate, colour = log10(BirthRate))) + geom_point(alpha = 0.5) + scale_color_continuous(low = "blue", high = "red")
ggplot(filter(geno_props, AlleleCount > 0), aes(OriginTime, AlleleCount, size = BirthRate, colour = log10(BirthRate))) + geom_point(alpha = 0.5) + scale_color_continuous(low = "blue", high = "red") + theme_classic()
#' Plot allele count versus origin time, coloured by birth rate
#'
#' @param file file containing columns "AlleleCount", "OriginTime and "BirthRate"
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @examples
#'
plot_allelecount_vs_origintime <- function(file) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file)
ggplot(filter(df, AlleleCount > 0), aes(OriginTime, AlleleCount, size = BirthRate, colour = log10(BirthRate))) +
geom_point(alpha = 0.5) +
scale_color_continuous(low = "blue", high = "red") +
theme_classic()
}
plot_allelecount_vs_origintime(fname)
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE), ylim = c(0, 10))
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
check()
count_seeds(May14thBigK_data)
count_seeds(May14thBigK_data, 18)
log2(1e6)
2^20
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
png("/Users/rnoble/Desktop/origintimes.png", width = 100, height = 100, res = 100)
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
dev.off()
png("/Users/rnoble/Desktop/origintimes.png", width = 1000, height = 1000, res = 100)
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
dev.off()
png("/Users/rnoble/Desktop/origintimes.png", width = 500, height = 500, res = 100)
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
dev.off()
png("/Users/rnoble/Desktop/origintimes.png", width = 700, height = 500, res = 100)
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
dev.off()
pdf("/Users/rnoble/Desktop/origintimes.pdf", width = 7, height = 5, res = 100)
pdf("/Users/rnoble/Desktop/origintimes.pdf", width = 7, height = 5)
plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
package = "demonanalysis", mustWork = TRUE))
dev.off()
check()
plot_all_charts("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed", output_filename = "charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixed/charts")
plot_all_charts("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed", output_filename = "charts_maxsize1E4", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixed", max_size = 1e4)
plot_all_charts("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed", output_filename = "charts_maxsize1E2", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixed", max_size = 100)
plot_all_charts("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed", output_filename = "charts_maxsize1E3", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixed", max_size = 1000)
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed/output_genotype_properties.dat")
#'
#' @param file file containing columns "AlleleCount", "OriginTime and "BirthRate"
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @examples
#' plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_allelecount_vs_origintime <- function(file, log = FALSE) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file)
q <- ggplot(filter(df, AlleleCount > 0), aes(OriginTime, AlleleCount, size = BirthRate, colour = log10(BirthRate))) +
geom_point(alpha = 0.5) +
scale_color_continuous(low = "blue", high = "red") +
theme_classic()
if(log) q <- q + scale_y_continuous(trans = 'log10')
print(q)
}
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed/output_genotype_properties.dat", log = TRUE)
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed/output_genotype_properties.dat")
check()
png("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixed/origintimes.png", width = 700, height = 500, res = 100)
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed/output_genotype_properties.dat", log = TRUE)
dev.off()
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed/output_genotype_properties.dat")
png("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixed/origintimes.png", width = 700, height = 500, res = 100)
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixed/output_genotype_properties.dat")
dev.off()
23670/60
23670/60^2
png("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixedWithDeath/origintimes.png", width = 700, height = 500, res = 100)
plot_allelecount_vs_origintime("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixedWithDeath/output_genotype_properties.dat")
dev.off()
plot_all_charts("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/May16thWellMixedWithDeath", output_filename = "charts_maxsize1E3", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May16thWellMixedWithDeath", max_size = 1000)
plot_logit_freq_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
lines(-1.5+log10(1/xlong^3) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
#' @export
#' @import dplyr
#' @importFrom stats plogis
#' @importFrom stats qlogis
#' @importFrom graphics axis
#' @importFrom graphics lines
#'
#' @examples
#' plot_logit_freq_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_logit_freq_dist2 <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file)
if("Generation" %in% colnames(df)) {
if(is.na(generation)) generation <- max(df$Generation)
df <- filter(df, Generation == generation)
}
df <- filter(df, Frequency < 1, Frequency > plogis(-14))
logit_breaks <- plogis(-14 + 0:100 * 26 / 100)
hist <- with(df, hist(rep(x = Frequency, times = Count), plot = FALSE, breaks = logit_breaks))
plot(log10(hist$density) ~ qlogis(hist$mids),
xaxt = "n", yaxt = "n",
xlim = c(qlogis(1E-6), qlogis(0.9999)),
ylim = c(-6, 6),
ylab = "density", ...)
xshort <- c(1E-6, 1E-4, 1E-2, 0.5, 0.99, 0.9999)
axis(1, at = qlogis(xshort), labels = xshort)
yshort <- -4:10
axis(2, at = yshort, labels = 10^yshort)
xlong <- plogis(seq(-8, -1, length = 100))
lines(-1.5+log10(1/xlong^2) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
lines(-1.5+log10(1/xlong^3) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
xlong <- plogis(seq(1, 8, length = 100))
lines(-1.5+log10(1/((xlong-1)*log10(1-xlong))) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
}
plot_logit_freq_dist2(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
#' @export
#' @import dplyr
#' @importFrom stats plogis
#' @importFrom stats qlogis
#' @importFrom graphics axis
#' @importFrom graphics lines
#'
#' @examples
#' plot_logit_freq_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_logit_freq_dist2 <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file)
if("Generation" %in% colnames(df)) {
if(is.na(generation)) generation <- max(df$Generation)
df <- filter(df, Generation == generation)
}
df <- filter(df, Frequency < 1, Frequency > plogis(-14))
logit_breaks <- plogis(-14 + 0:100 * 26 / 100)
hist <- with(df, hist(rep(x = Frequency, times = Count), plot = FALSE, breaks = logit_breaks))
plot(log10(hist$density) ~ qlogis(hist$mids),
xaxt = "n", yaxt = "n",
xlim = c(qlogis(1E-6), qlogis(0.9999)),
ylim = c(-6, 6),
ylab = "density", ...)
xshort <- c(1E-6, 1E-4, 1E-2, 0.5, 0.99, 0.9999)
axis(1, at = qlogis(xshort), labels = xshort)
yshort <- -4:10
axis(2, at = yshort, labels = 10^yshort)
xlong <- plogis(seq(-8, -1, length = 100))
lines(-1.5+log10(1/xlong^2) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
lines(-1.5+log10(1/xlong^3) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
lines(-1.5+log10(1/xlong) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
xlong <- plogis(seq(1, 8, length = 100))
lines(-1.5+log10(1/((xlong-1)*log10(1-xlong))) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
}
plot_logit_freq_dist2(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
#' @export
#' @import dplyr
#' @importFrom stats plogis
#' @importFrom stats qlogis
#' @importFrom graphics axis
#' @importFrom graphics lines
#'
#' @examples
#' plot_logit_freq_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_logit_freq_dist2 <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file)
if("Generation" %in% colnames(df)) {
if(is.na(generation)) generation <- max(df$Generation)
df <- filter(df, Generation == generation)
}
df <- filter(df, Frequency < 1, Frequency > plogis(-14))
logit_breaks <- plogis(-14 + 0:100 * 26 / 100)
hist <- with(df, hist(rep(x = Frequency, times = Count), plot = FALSE, breaks = logit_breaks))
plot(log10(hist$density) ~ qlogis(hist$mids),
xaxt = "n", yaxt = "n",
xlim = c(qlogis(1E-6), qlogis(0.9999)),
ylim = c(-6, 6),
ylab = "density", ...)
xshort <- c(1E-6, 1E-4, 1E-2, 0.5, 0.99, 0.9999)
axis(1, at = qlogis(xshort), labels = xshort)
yshort <- -4:10
axis(2, at = yshort, labels = 10^yshort)
xlong <- plogis(seq(-8, 10, length = 100))
lines(-1.5+log10(1/xlong^2) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
xlong <- plogis(seq(1, 8, length = 100))
lines(-1.5+log10(1/((xlong-1)*log10(1-xlong))) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
}
plot_logit_freq_dist2(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
check()
2^13
comb_df <- combine_dfs(system.file("extdata", "", package = "demonanalysis", mustWork = TRUE))
num_parameters = count_parameters(system.file("extdata", "",
package = "demonanalysis", mustWork = TRUE))
add_relative_time(comb_df, start_size = 100, num_parameters = num_parameters)
?slice
#' @return the same dataframe with additional columns: "new_time" is the time elapsed since
#' NumCells = start_size; "div0" is DriverEdgeDiversity when NumCells = start_size
#'
#' @export
#'
#' @examples
#' num_parameters = count_parameters(system.file("extdata", "",
#' package = "demonanalysis", mustWork = TRUE))
#' comb_df <- combine_dfs(system.file("extdata", "", package = "demonanalysis", mustWork = TRUE))
#' add_relative_time(comb_df, start_size = 100, num_parameters = num_parameters)
add_relative_time <- function(df, start_size, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(new_time = gen_adj - min(gen_adj[NumCells >= start_size], na.rm = TRUE)) %>%
mutate(div0 = min(DriverEdgeDiversity[gen_adj == min(gen_adj[NumCells >= start_size &
(!is.na(DriverEdgeDiversity) | Generation == max(Generation))], na.rm = TRUE)])) %>%
ungroup()
return(df)
}
add_relative_time(comb_df, start_size = 100, num_parameters = num_parameters)
500 * 2^(0:5)
500 * 2^(0:6)
500 * 2^(0:8)
500 * 2^(0:8/2)
500 * 2^(0:16/2)
rm(add_relative_time)
rm(plot_allelecount_vs_origintime)
rm(plot_logit_freq_dist2())
rm(plot_logit_freq_dist2)
check()
check()
check()
check()
install("demonanalysis")
install(demonanalysis)
getwd()
install("/Users/rnoble/Documents/GitHub/demonanalysis")
build()
plot_corr_outcome_versus_period
check()
?lm
?cor
#'
#' @import dplyr
#' @import lazyeval
#' @importFrom stats setNames
#' @importFrom stats var
#' @export
#'
#' @examples
#' s1 <- data.frame(a = 1:3, b = 1:3 * (1 + rnorm(3) / 10))
#' find_correlations(s1, "a", "b", "c", 3)
find_correlations <- function(summary, factor1, factor2, result_name, min_count) {
summary %>%
mutate_(variance = interp(~var(var1), var1 = as.name(factor2))) %>%
filter(variance > 0) %>% # to avoid warnings when all values of factor2 are identical
mutate_(count1 = interp(~length(var1), var1 = as.name(factor1)),
count2 = interp(~length(var2), var2 = as.name(factor2))) %>%
filter(count1 >= min_count, count2 >= min_count) %>%
summarise_(temp_name = interp(~cor(var1, var2, method = "spearman"), var1 = as.name(factor1), var2 = as.name(factor2))) %>%
rename_(.dots = setNames("temp_name", paste0(result_name)))
}
s1 <- data.frame(a = 1:3, b = 1:3 * (1 + rnorm(3) / 10))
find_correlations(s1, "a", "b", "c", 3)
check()
check()
s1 <- data.frame(a = 1:3, b = 1:3 * (1 + rnorm(3) / 10))
find_correlations(s1, "a", "b", "c", 3)
rm(find_correlations)
find_correlations(s1, "a", "b", "c", 3)
library(demonanalysis)
library(readr)
library(dplyr)
data_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May20th"
plot_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May20th"
num_parameters <- 18
min_count <- 20
data <- read_csv(paste0(data_dir, "/dataBigK.csv"), guess_max = 1E4)
summary <- read_csv(paste0(data_dir, "/summaryBigK.csv"), guess_max = 1E4)
cor_summary <- get_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count)
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time", including all cells
wait_cor_summary <- arrange(wait_cor_summary, K, migration_type, migration_edge_only, start_size)
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
for(i in c(0, 2)) for(j in 0:1) plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j), output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
check()
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
for(k in 2^c(5, 9, 13)) for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j, K == k), "DriverDiversityFrom1SamplesAtDepth",
output_filename = paste0("depth_wait_correlations_K", k, "_type", i, "_edge", j), output_dir = plot_dir)
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 32000))
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, start_size == 32000))
plot_scatter_waiting_time_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, start_size == 32000))
plot_scatter_waiting_time_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, gap == min(summary$gap)))
plot_trajectories_by_K(filter(data, migration_type == 0, migration_edge_only == 0))
plot_trajectories_by_K(filter(data, migration_type == 2, migration_edge_only == 0))
plot_trajectories_by_diversity(filter(data, migration_type == 0, migration_edge_only == 0))
colnames(data)
data <- add_relative_time(data, start_size = 8000, num_parameters = num_parameters)
plot_trajectories_by_diversity(filter(data, migration_type == 0, migration_edge_only == 0))
data <- add_relative_time(data, start_size = 32000, num_parameters = num_parameters)
plot_trajectories_by_diversity(filter(data, migration_type == 0, migration_edge_only == 0))
colnames(data)
plot_viol_sweep_metric(filter(summary, gap == min(gap), start_size == min(start_size)))
plot_viol_sweep_metric(filter(summary, migration_type == 0, migration_edge_only == 0, gap == min(gap), start_size == min(start_size)))
plot_viol_sweep_metric(filter(summary, migration_type == 0, migration_edge_only == 1, gap == min(gap), start_size == min(start_size)))
plot_viol_sweep_metric(filter(summary, migration_type == 1, migration_edge_only == 0, gap == min(gap), start_size == min(start_size)))
plot_viol_sweep_metric(filter(summary, migration_type == 1, migration_edge_only == 1, gap == min(gap), start_size == min(start_size)))
plot_viol_sweep_metric(filter(summary, migration_type == 2, migration_edge_only == 0, gap == min(gap), start_size == min(start_size)))
plot_viol_sweep_metric(filter(summary, migration_type == 2, migration_edge_only == 1, gap == min(gap), start_size == min(start_size)))
plot_R2_verus_sweep_metric(wait_cor_summary)
check()
plot_R2_verus_sweep_metric(wait_cor_summary)
check()
plot_R2_verus_sweep_metric(wait_cor_summary)
plot_R2_verus_sweep_metric(wait_cor_summary, col_name = "DriverEdgeDiversity")
?plot_scatter_outcome_diversity
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, start_size == 32000), output_filename = "scatter_outcome_diversity_0_0_8192_32000", output_dir = plot_dir)
plot_scatter_waiting_time_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, gap == min(summary$gap)),
output_filename = "scatter_waiting_time_diversity_0_0_8192", output_dir = plot_dir)
check()
check()
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, start_size == 32000),
output_filename = "scatter_outcome_diversity_0_0_8192_32000", output_dir = plot_dir)
plot_scatter_waiting_time_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 8192, gap == min(summary$gap)),
output_filename = "scatter_waiting_time_diversity_0_0_8192", output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_trajectories_by_K(filter(data, migration_type == i, migration_edge_only == j),
output_filename = paste0("trajectories_by_K_type", i, "_edge", j), output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_trajectories_by_diversity(filter(data, migration_type == i, migration_edge_only == j),
output_filename = paste0("trajectories_by_diversity_type", i, "_edge", j), output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_viol_sweep_metric(filter(summary, migration_type == i, migration_edge_only == j, gap == min(gap), start_size == min(start_size)),
output_filename = paste0("sweep_metric_type", i, "_edge", j), output_dir = plot_dir)
plot_R2_verus_sweep_metric(wait_cor_summary, col_name = "DriverEdgeDiversity",
output_filename = "R2_verus_sweep_metric", output_dir = plot_dir)
check()
?scale_y_log10
check()
for(i in c(0, 2)) for(j in 0:1) plot_viol_sweep_metric(filter(summary, migration_type == i, migration_edge_only == j, gap == min(gap), start_size == min(start_size)),
output_filename = paste0("sweep_metric_type", i, "_edge", j), output_dir = plot_dir)
check()
min(summary$mean_autocor, na.rm = TRUE)
check()
for(i in c(0, 2)) for(j in 0:1) plot_viol_sweep_metric(filter(summary, migration_type == i, migration_edge_only == j, gap == min(gap), start_size == min(start_size)),
output_filename = paste0("sweep_metric_type", i, "_edge", j), output_dir = plot_dir)
check()
for(i in c(0, 2)) for(j in 0:1) plot_viol_sweep_metric(filter(summary, migration_type == i, migration_edge_only == j, gap == min(gap), start_size == min(start_size)),
output_filename = paste0("sweep_metric_type", i, "_edge", j), output_dir = plot_dir)
phylo <- filter(driver_phylo, CellsPerSample == -1)
pop_df <- get_population_df(phylo)
library(ggmuller)
pop_df <- get_population_df(phylo)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 4)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 2)
# remove generations with total population zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Population) > 0) %>%
ungroup()
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
View(pop_df)
round(length(unique(pop_df$Generation))/10)
round(length(unique(pop_df$Generation))/6)
unique(pop_df$Generation)
median(diff(unique(pop_df$Generation)))
round(1 / median(diff(unique(pop_df$Generation))))
round(5 / median(diff(unique(pop_df$Generation))))
check()
for(i in c(0, 2)) for(j in 0:1) plot_viol_sweep_metric(filter(summary, migration_type == i, migration_edge_only == j, gap == min(gap), start_size == min(start_size)),
output_filename = paste0("sweep_metric_type", i, "_edge", j), output_dir = plot_dir)
check()
for(i in c(0, 2)) for(j in 0:1) plot_trajectories_by_K(filter(data, migration_type == i, migration_edge_only == j),
output_filename = paste0("trajectories_by_K_type", i, "_edge", j), output_dir = plot_dir)
dfb <- data.frame(col = c("red", "green", "blue", "purple", "yellow"), allele_freq = c(1, 0.55, 0.45, 0.35, 0.35))
dfb <- data.frame(col = c("red", "green", "blue", "purple", "yellow"), allele_freq = c(1, 0.55, 0.45, 0.35, 0.35), genotype_freq = c(0, 0.2, 0.1, 0.35, 0.35))
plot(allele_freq ~ col, data = dfb, type = "h")
?plot
par(mfrow = c(1, 1))
plot(allele_freq ~ col, data = dfb, type = "h")
plot(allele_freq ~ col, data = dfb, type = "h", col = c("red", "green", "blue", "purple", "yellow"))
plot(allele_freq ~ col, data = dfb, type = "h", col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(allele_freq ~ col, data = dfb, type = "h", fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(allele_freq ~ col, data = dfb, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(allele_freq ~ col, data = dfb, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
par(mfrow = c(1, 1))
plot(allele_freq ~ col, data = dfb, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(genotype_freq ~ col, data = dfb, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(genotype_freq ~ col, data = dfb, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1), lwd = 5)
x <- c(1:10)
y <- c(1:10)
plot(x,y,type="h")
x <- letters(1:10)
y <- c(1:10)
plot(x,y,type="h")
x <- letters[1:10]
y <- c(1:10)
plot(x,y,type="h")
letters[1:10]
plot(genotype_freq, col, data = dfb, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(dfb$genotype_freq, dfb$col, type = 'h', fill = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(dfb$genotype_freq, dfb$col, type = 'h', col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(dfb$col, dfb$genotype_freq, type = 'h', col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(dfb$col, type = 'h', col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(dfb$genotype_freq, type = 'h', col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
plot(dfb$genotype_freq, col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
barplot(dfb$genotype_freq, col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1))
barplot(dfb$genotype_freq, col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1), ylab = "genotype frequency")
barplot(dfb$allele_freq, col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1), ylab = allele frequency")
barplot(dfb$allele_freq, col = c("red", "green", "blue", "purple", "yellow"), ylim = c(0, 1), ylab = "allele frequency")
barplot(dfb$allele_freq, col = c("red", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = allele frequency")
barplot(dfb$allele_freq, col = c("red", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = "allele frequency")
barplot(dfb$genotype_freq, col = c("red", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = "genotype frequency")
barplot(dfb$allele_freq, col = c("lightcoral", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = "allele frequency")
barplot(dfb$genotype_freq, col = c("lightcoral", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = "genotype frequency")
par(mfrow = c(1, 2))
barplot(dfb$allele_freq, col = c("lightcoral", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = "allele frequency")
barplot(dfb$genotype_freq, col = c("lightcoral", "green", "skyblue", "purple", "yellow"), ylim = c(0, 1), ylab = "genotype frequency")
