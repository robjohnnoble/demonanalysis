z3 <- 100*1.004^(3*(t-10*365/3))
z4 <- 100*1.004^(4*(t-14*365/3))
z5 <- 100*1.004^(5*(t-17*365/3))
z6 <- 100*1.004^(6*(t-19*365/3))
z7 <- 100*1.004^(7*(t-21*365/3))
z8 <- 100*1.004^(8*(t-22.5*365/3))
plot(z1 ~ t, log="y", ylim = c(1,1E12), type = "l", col = "red")
lines(z2 ~ t, col = "green3")
lines(z3 ~ t, col = "blue")
lines(z4 ~ t, col = "purple")
lines(z5 ~ t, col = "light blue")
lines(z6 ~ t, col = "yellow")
lines(z7 ~ t, col = "black")
lines(z8 ~ t, col = "orange")
sum <- z1+z2+z3+z4+z5+z6+z7+z8
x <- rbind(z1,z2,z3,z4,z5,z6,z7,z8)/sum
stackedarea(x, colors = c("red", "green3", "blue", "purple", "light blue",
"yellow", "black", "orange"), border="transparent")
stackedarea <- function(x, index=NULL, ext=1, legend=NULL, cumul=FALSE, transp=FALSE, add=FALSE, colors=NULL, ...){
##------- Format checking
stopifnot(is.data.frame(x) | is.matrix(x))
##
if (is.data.frame(x)) x <- as.matrix(x)
##
if (sum(x<0)>0) stop("x must be positive")
##
if (transp==TRUE) x <- t(x)
##
stopifnot(ncol(x)>1)
##
if (is.null(index)) index <- 1:ncol(x)
##
vecol <- colSums(x)
if (sum(vecol!=rep(1,ncol(x)))>0) x <- t(t(x)/vecol)
##
if (nrow(x)>1){
if (!cumul) for (i in 2:nrow(x)) x[i,] <- x[i-1,]+x[i,]
}
##------- Plot
## Colors
if (is.null(colors)) {
colors=rep(1:8,length.out=nrow(x))
}
else colors <- rep(colors,length.out=nrow(x))
## Defaults plotting set
if (!add) {
oldpar <- par(no.readonly=TRUE)
layout(matrix(1:2,1), widths=c(1,0.3))
par(mar=c(5,4,4,1),xaxs="i", yaxs="i", ann=FALSE)
plot(range(index), ext*c(0,1), type="n")
}
## Stacked area
cx <- c(index,rev(index))
polygon(cx,ext*c(rep(1,ncol(x)),1-rev(x[1,])),col=colors[1],...)
if (nrow(x)>1) polygon(cx,ext*c(1-x[nrow(x)-1,],rep(0,ncol(x))),col=colors[nrow(x)],...)
if (nrow(x)>2){
for (i in 2:(nrow(x)-1)){
cy <- c(1-x[i-1,],rev(1-x[i,]))
polygon(cx,ext*cy,col=colors[i],...)
}
}
## Defaults legend
if (!add) {
box(lwd=1.1)
par(mar=c(4,1,4,1), xaxt="n", yaxt="n", bty="n")
if (is.null(legend)) legend <- paste0("population ",1:nrow(x))
plot(c(0,1),c(0,1),type="n")
legend("center", legend, fill=colors, bty="n")
par(oldpar)
}
}
stackedarea(x, colors = c("red", "green3", "blue", "purple", "light blue",
"yellow", "black", "orange"), border="transparent")
plot(z1 ~ t, log="y", ylim = c(1,1E12), type = "l", col = "red")
lines(z2 ~ t, col = "green3")
lines(z3 ~ t, col = "blue")
lines(z4 ~ t, col = "purple")
lines(z5 ~ t, col = "light blue")
lines(z6 ~ t, col = "yellow")
lines(z7 ~ t, col = "black")
lines(z8 ~ t, col = "orange")
df1 <- data.frame(t = 1:3, p = 5:7)
df1 <- data.frame(t = 1:3, p = 5:7)
df2 <- data.frame(a = 0, b = 9)
df1
df2
cbind(df1, df2)
cbind(df2, df1)
c(0.1, seq(0.2, 1, by = 0.1))
reflect_on_diagonal <- function(matrix) {
matrix[lower.tri(matrix)] <- t(matrix)[lower.tri(t(matrix))]
diag(matrix) <- 0
return(matrix)
}
get_tree_from_matrix <- function(matrix) {
matrix <- matrix[, colSums(is.na(matrix)) < nrow(matrix)] # remove any NA columns
matrix <- reflect_on_diagonal(matrix) # copy upper half to lower half, reflected on the leading diagonal
return(njs(as.dist(matrix))) # create tree object
}
ancestry <- function(edges) {
start <- find_start_node(edges)
anc <- data.frame(V1 = start)
gens_list <- unique(edges$Identity)
for(gen in 1:length(gens_list)) {
now <- edges[gen, "Identity"]
res <- now
repeat {
if(move_up(edges, now) == now) break
now <- move_up(edges, now)
res <- c(now, res)
}
res <- as.data.frame(t(res))
anc <- rbind_list(anc, res)
}
max_len <- dim(anc)[2]
colnames(anc) <- paste0("Level", 1:max_len)
gens_list <- c(start, gens_list)
anc <- cbind(anc, Identity = gens_list)
rownames(anc) <- NULL
return(anc)
}
dominant <- function(anc, pop_subdf, threshold) {
anc <- merge(anc, pop_subdf)
total_pop <- sum(anc$Population)
max_len <- dim(anc)[2]
for(level in 1:max_len) {
col <- paste0("Level", level)
dom <- anc %>% group_by_(col) %>%
filter(sum(Population) / total_pop > threshold) %>%
select_(col)
dom <- dom[!is.na(dom), ]
if(dim(dom)[1] == 0) break
else res <- max(dom)
}
return(res)
}
library(ggmuller)
input_dir
phylo <- read.delim(paste0(input_dir, "phylo.dat"))
phylo <- read.delim(paste0(input_dir, "/phylo.dat"))
edges <- get_edges(phylo)
phylo$Generation
phylo$Generations
colnames(phylo)
phylo$Generation
View(phylo)
phylo <- read.delim(paste0(input_dir, "/driver_phylo.dat"))
edges <- get_edges(phylo)
ancestry(edges)
edges
phylo <- filter(phylo, CellsPerSample == -1)
edges <- get_edges(phylo)
edges
ancestry(edges)
pop_df <- get_population_df(phylo)
sweep_sequence <- function(pop_df, breaks = 10) { #*
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
# calculate lag in terms of generations:
lag <- round(length(unique(pop_df$Generation))/breaks)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df)
round(length(unique(pop_df$Generation))/10)
View(output)
plot(sweep_sequence(pop_df))
total_pop <- sum(filter(pop_df, Generation == max(Generation))$Population)
num_alleles <- length(edges$Identity)
theta_k <- theta.k(dist * total_pop, n = total_pop, k = num_alleles)
library(ape)
theta_k <- theta.k(dist * total_pop, n = total_pop, k = num_alleles)
image_df <- image_df_from_grid_file("data/output_passengersgrid.dat")
save(output_passengersgrid, file="data/output_passengersgrid.RData")
output_passengersgrid <- image_df
save(output_passengersgrid, file="data/output_passengersgrid.RData")
grid_plot <- function(image_df, palette = NA, discrete = FALSE, add_legend = FALSE, legend_title = "") {
h2 <- ggplot(image_df, aes(x, y, fill = z)) +
geom_raster() +
theme(legend.position = ifelse(add_legend, "right", "none")) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
if(discrete) {
if(!is.na(palette)) h2 <- h2 + scale_fill_manual(name = legend_title, values = palette) +
scale_color_manual(values = palette)
}
else {
if(!is.na(palette)) {
h2 <- h2 + scale_fill_distiller(name = legend_title, palette ="RdBu", direction = -1, na.value="white") +
scale_color_distiller(palette ="RdBu", na.value="white")
}
else {
h2 <- h2 + scale_fill_distiller(name = legend_title, palette = palette, direction = -1) +
scale_color_distiller(palette = palette)
}
}
return(h2)
}
grid_plot(output_passengersgrid)
grid_plot <- function(image_df, palette = NA, discrete = FALSE, add_legend = FALSE, legend_title = "") {
h2 <- ggplot(image_df, aes(x, y, fill = z)) +
geom_raster() +
theme(legend.position = ifelse(add_legend, "right", "none")) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
if(discrete) {
if(!is.na(palette)) h2 <- h2 + scale_fill_manual(name = legend_title, values = palette) +
scale_color_manual(values = palette)
}
else {
if(is.na(palette)) {
h2 <- h2 + scale_fill_distiller(name = legend_title, palette ="RdBu", direction = -1, na.value="white") +
scale_color_distiller(palette ="RdBu", na.value="white")
}
else {
h2 <- h2 + scale_fill_distiller(name = legend_title, palette = palette, direction = -1) +
scale_color_distiller(palette = palette)
}
}
return(h2)
}
grid_plot(output_passengersgrid)
grid_plot(output_passengersgrid, discrete = TRUE)
system.file("extdata", "driver_phylo.dat", package = "demonanalysis")
system.file("extdata", "", package = "demonanalysis")
plot_all_images(system.file("extdata", "", package = "demonanalysis"))
plot_all_images <- function(path, output_filename = NA, file_type = "png", output_dir = NA, trim = -1) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
Muller_df <- muller_df_from_file(paste0(path, "driver_phylo.dat"))
if(class(Muller_df) != "data.frame") return(NA)
long_palette <- c("#8A7C64", "#599861", "#89C5DA", "#DA5724", "#74D944", "#CE50CA",
"#3F4921", "#C0717C", "#CBD588", "#5F7FC7", "#673770", "#D3D93E",
"#38333E", "#508578", "#D7C1B1", "#689030", "#AD6F3B", "#CD9BCD",
"#D14285", "#6DDE88", "#652926", "#7FDCC0", "#C84248", "#8569D5",
"#5E738F", "#D1A33D")
dd <- (-1):25
dd.col <- c("white", long_palette)
names(dd.col)  <- dd
h1 <- Muller_plot(Muller_df, colour_by = "col_index", palette = dd.col)
h2 <- Muller_pop_plot(Muller_df, colour_by = "col_index", palette = dd.col)
h3 <- Muller_plot(Muller_df, colour_by = "BirthRate", add_legend = TRUE)
image_df <- image_df_from_grid_file(paste0(path, "output_driversgrid.dat"), trim)
image_df[which(image_df$z > 0), "z"] <- as.character(image_df[which(image_df$z > 0), "z"] %% 25 + 1)
g1 <- grid_plot(image_df, palette = dd.col, discrete = TRUE)
image_df <- image_df_from_grid_file(paste0(path, "output_birthratesgrid.dat"), trim)
g2 <- grid_plot(image_df, add_legend = TRUE, legend_title = "BirthRate")
image_df <- image_df_from_grid_file(paste0(path, "output_passengersgrid.dat"), trim)
g3 <- grid_plot(image_df, add_legend = TRUE, legend_title = "Passengers")
image_df <- image_df_from_grid_file(paste0(path, "output_popgrid.dat"), trim)
g4 <- grid_plot(image_df, add_legend = TRUE, legend_title = "Population")
print(paste0("Created all plots for file ", output_filename))
if(!is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 1000, height = 1000, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 500, height = 600)
}
lay <- rbind(c(1,1,2),
c(3,3,3),
c(4,4,5),
c(NA,6,7))
print(grid.arrange(h1, g1, h2, h3, g2, g3, g4, layout_matrix = lay, heights = c(1, 1, 0.75, 0.75)))
if(!is.na(output_dir)) dev.off()
print("Saved the plot")
}
plot_all_images(system.file("extdata", "", package = "demonanalysis"))
plot_all_images <- function(path, output_filename = NA, file_type = "png", output_dir = NA, trim = -1) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_filename)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
Muller_df <- muller_df_from_file(paste0(path, "driver_phylo.dat"))
if(class(Muller_df) != "data.frame") return(NA)
long_palette <- c("#8A7C64", "#599861", "#89C5DA", "#DA5724", "#74D944", "#CE50CA",
"#3F4921", "#C0717C", "#CBD588", "#5F7FC7", "#673770", "#D3D93E",
"#38333E", "#508578", "#D7C1B1", "#689030", "#AD6F3B", "#CD9BCD",
"#D14285", "#6DDE88", "#652926", "#7FDCC0", "#C84248", "#8569D5",
"#5E738F", "#D1A33D")
dd <- (-1):25
dd.col <- c("white", long_palette)
names(dd.col)  <- dd
h1 <- Muller_plot(Muller_df, colour_by = "col_index", palette = dd.col)
h2 <- Muller_pop_plot(Muller_df, colour_by = "col_index", palette = dd.col)
h3 <- Muller_plot(Muller_df, colour_by = "BirthRate", add_legend = TRUE)
image_df <- image_df_from_grid_file(paste0(path, "output_driversgrid.dat"), trim)
image_df[which(image_df$z > 0), "z"] <- as.character(image_df[which(image_df$z > 0), "z"] %% 25 + 1)
g1 <- grid_plot(image_df, palette = dd.col, discrete = TRUE)
image_df <- image_df_from_grid_file(paste0(path, "output_birthratesgrid.dat"), trim)
g2 <- grid_plot(image_df, add_legend = TRUE, legend_title = "BirthRate")
image_df <- image_df_from_grid_file(paste0(path, "output_passengersgrid.dat"), trim)
g3 <- grid_plot(image_df, add_legend = TRUE, legend_title = "Passengers")
image_df <- image_df_from_grid_file(paste0(path, "output_popgrid.dat"), trim)
g4 <- grid_plot(image_df, add_legend = TRUE, legend_title = "Population")
print(paste0("Created all plots for file ", output_filename))
if(!is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 1000, height = 1000, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 500, height = 600)
}
lay <- rbind(c(1,1,2),
c(3,3,3),
c(4,4,5),
c(NA,6,7))
print(grid.arrange(h1, g1, h2, h3, g2, g3, g4, layout_matrix = lay, heights = c(1, 1, 0.75, 0.75)))
if(!is.na(output_dir)) dev.off()
print("Saved the plot")
}
plot_all_images(system.file("extdata", "", package = "demonanalysis"))
path <- system.file("extdata", "", package = "demonanalysis")
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
path
Muller_df <- muller_df_from_file(paste0(path, "driver_phylo.dat"))
paste0(path, "driver_phylo.dat")
file <- paste0(path, "driver_phylo.dat")
phylo <- read_delim(file, "\t", escape_double = FALSE, trim_ws = TRUE)
phylo <- filter(phylo, CellsPerSample == -1)
View(phylo)
edges <- get_edges(phylo)
edges
pop_df <- get_population_df(phylo)
pop_df <- pop_df %>% mutate(col_index = pop_df$Identity)
pop_df$col_index[pop_df$col_index > 0] <- pop_df$col_index[pop_df$col_index > 0] %% 25 + 1
pop_df$col_index <- as.character(pop_df$col_index)
get_Muller_df(edges, pop_df)
View(pop_df)
unique(pop_df$Identity)
unique(edges$Identity)
set1 <- unique(pop_df$Identity)
set2 <- unique(edges$Identity)
set3 <- unique(edges$Parent)
length(setdiff(set1, set2)
)
length(setdiff(set3, set2))
get_Muller_df <- function(edges, pop_df, cutoff = 0, start_positions = 0.5, threshold = NA, add_zeroes = NA, smooth_start_points = NA) {
Population <- NULL # avoid check() note
Generation <- NULL # avoid check() note
original_colname <- "Generation"
# rename Time column (original name will be restored later):
if("Time" %in% colnames(pop_df) && !("Generation" %in% colnames(pop_df))) {
colnames(pop_df)[colnames(pop_df) == "Time"] <- "Generation"
original_colname <- "Time"
}
# add missing population values:
if(dim(pop_df)[1] != length(unique(pop_df$Identity)) * length(unique(pop_df$Generation))) {
added_rows <- expand.grid(Identity = unique(pop_df$Identity), Generation = unique(pop_df$Generation))
pop_df <- merge(added_rows, pop_df, all = TRUE)
pop_df[is.na(pop_df$Population), "Population"] <- 0
pop_df <- arrange_(pop_df, ~Generation)
warning("missing population sizes replaced by zeroes")
}
if (!missing(add_zeroes)) {
warning("argument add_zeroes is deprecated (it is now always TRUE).",
call. = FALSE)
}
if (!missing(smooth_start_points)) {
warning("argument smooth_start_points is deprecated (it is now always TRUE).",
call. = FALSE)
}
if (!missing(threshold)) {
warning("argument threshold is deprecated (use cutoff instead, noting that genotypes whose abundance never exceeds the cutoff value are removed,
whereas previously genotypes whose abundance never exceeded *twice* the threshold value were removed).",
call. = FALSE)
if (missing(cutoff)) cutoff <- threshold * 2
}
# check/set column names:
if(!("Generation" %in% colnames(pop_df)) | !("Identity" %in% colnames(pop_df)) | !("Generation" %in% colnames(pop_df)))
stop("colnames(pop_df) must contain Generation (or Time), Identity and Population")
if(!is.na(edges)[1]) {
set1 <- unique(pop_df$Identity)
set2 <- unique(edges$Identity)
set3 <- unique(edges$Parent)
# check that pop_df and edges have compatible Identity values:
if(length(setdiff(set1, set2)) != 1) stop(paste0("Identity values in edges must match Identity values in pop_df, excluding the original genotype (which has no parent) ", setdiff(set1, set2)))
# check that Parent and Identity values in edges are consistent:
if(length(setdiff(set3, set2)) != 1) stop("Parent values in edges must also appear as Identity values in edges, excluding the original genotype (which has no parent)")
}
if(!is.na(edges)[1]) {
if("phylo" %in% class(edges)) {
collapse.singles(edges)
edges <- edges$edge
}
edges <- na.omit(edges) # remove any rows containing NA
colnames(edges) <- c("Parent", "Identity")
if(is.factor(edges$Parent)) edges$Parent <- levels(edges$Parent)[edges$Parent]
if(is.factor(edges$Identity)) edges$Identity <- levels(edges$Identity)[edges$Identity]
}
# add rows to pop_df to ensure genotype starting points are plotted correctly:
pop_df <- add_start_points(pop_df, start_positions)
# construct a dataframe with "Age" of each genotype:
pop_df <- arrange_(pop_df, ~-Population)
pop_df <- arrange_(pop_df, ~Generation)
lookup <- group_by_(pop_df, ~Identity) %>%
filter_(~Population > 0 | Generation == max(Generation)) %>%
slice(1) %>%
arrange_(~Generation) %>%
ungroup()
lookup <- mutate(lookup, Age = 1:dim(lookup)[1]) %>%
select_(~-c(Generation, Population))
if(is.factor(lookup$Identity)) lookup$Identity <- levels(lookup$Identity)[lookup$Identity]
lookup <- select_(lookup, ~c(Identity, Age))
# add semi-frequencies:
pop_df <- pop_df %>% group_by_(~Generation) %>%
mutate(Frequency = (Population / sum(Population)) / 2) %>%
ungroup()
pop_df$Population <- pop_df$Population / 2 # because of the duplication
pop_df$Frequency[is.nan(pop_df$Frequency)] <- 0
# duplicate rows:
Muller_df <- rbind(pop_df, pop_df)
Muller_df <- arrange_(Muller_df, ~Generation)
if(!is.na(edges)[1]) {
# replace each genotype name in adjacency matrix with corresponding Age:
edges <- filter_(edges, ~Identity %in% lookup$Identity)
edges <- left_join(edges, lookup, by = "Identity")
edges <- select_(edges, ~-Identity)
colnames(edges) <- c("Parent", "Identity")
edges <- arrange_(edges, ~Identity)
colnames(lookup)[1] <- "Parent"
edges <- left_join(edges, lookup, by = "Parent")
edges$Parent <- edges$Age
edges <- select_(edges, ~-Age)
# get the path:
path <- path_vector(edges)
path <- rev(path) # apparently, the convention for Muller plots to have earliest-arriving genotypes plotted nearest the top
# replace each Age in the path with corresponding genotype name:
path <- left_join(data.frame(Age = path), lookup, by = "Age")$Parent
}
else path <- c(unique(pop_df$Identity)[1], unique(pop_df$Identity)[1]) # if there's only one genotype
# rearrange the population data according to the path:
Muller_df <- reorder_by_vector(Muller_df, path)
# optionally remove rare genotypes, and recalculate frequencies:
if(cutoff > 0) {
Muller_df <- Muller_df %>% group_by_(~Identity) %>%
filter_(~max(Frequency) >= cutoff / 2)
Muller_df <- Muller_df %>% group_by_(~Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
}
# the following adjusts for ggplot2 v.2.2.0, which (unlike v.2.1.0) stacks areas in order of their factor levels
Muller_df$Group_id <- factor(Muller_df$Group_id, levels = rev(
unlist(as.data.frame(Muller_df %>% filter_(~Generation == max(Generation)) %>% select_(~Group_id)), use.names=FALSE)
))
# restore original time column name:
colnames(Muller_df)[colnames(Muller_df) == "Generation"] <- original_colname
return(Muller_df)
}
get_Muller_df(edges, pop_df)
Muller_df <- muller_df_from_file(system.file("extdata", "driver_phylo.dat", package = "demonanalysis"))
plot_all_images(system.file("extdata", "", package = "demonanalysis"))
plot_all_charts(system.file("extdata", "", package = "demonanalysis"))
plot_all_charts <- function(path, output_filename = "chart", file_type = "png", output_dir = NA) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_filename)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
output_allele_hist <- read_delim(paste0(path, "output_allele_hist.dat"), "\t", trim_ws = TRUE)
output_allele_cum_dist <- read_delim(paste0(path, "output_allele_cum_dist.dat"), "\t", trim_ws = TRUE)
hist1 <- get_genotype_sizes_hist(paste0(path, "genotypes.dat"))
if(!is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 600, height = 600, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 6, height = 6)
}
par(mfrow = c(2, 2))
par(mgp = c(2.2, 1, 0))
par(mar = c(3.8, 3.8, 0.8, 0.8))
plot_allele_hist(output_allele_hist)
plot_allele_cum_dist(output_allele_cum_dist)
plot_genotype_sizes_hist(hist1)
plot_first_inc_moment(hist1)
if(!is.na(output_dir)) dev.off()
}
plot_all_charts(system.file("extdata", "", package = "demonanalysis"))
plot_all_charts <- function(path, output_filename = NA, file_type = "png", output_dir = NA) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_filename)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
output_allele_hist <- read_delim(paste0(path, "output_allele_hist.dat"), "\t", trim_ws = TRUE)
output_allele_cum_dist <- read_delim(paste0(path, "output_allele_cum_dist.dat"), "\t", trim_ws = TRUE)
hist1 <- get_genotype_sizes_hist(paste0(path, "genotypes.dat"))
if(!is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 600, height = 600, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 6, height = 6)
}
par(mfrow = c(2, 2))
par(mgp = c(2.2, 1, 0))
par(mar = c(3.8, 3.8, 0.8, 0.8))
plot_allele_hist(output_allele_hist)
plot_allele_cum_dist(output_allele_cum_dist)
plot_genotype_sizes_hist(hist1)
plot_first_inc_moment(hist1)
if(!is.na(output_dir)) dev.off()
}
plot_all_charts(system.file("extdata", "", package = "demonanalysis"))
final_error_message(system.file("extdata", "", package = "demonanalysis"))
phylo <- filter(driver_phylo, CellsPerSample == -1)
500 + 0:5*1000
c(start_size_range, 500 + 6:20*1000)
c(500 + 0:5*1000, 500 + 6:20*1000)
min_seeds
?read.csv
