dominant <- function(anc, pop_subdf, threshold) {
anc <- merge(anc, pop_subdf)
total_pop <- sum(anc$Population)
max_len <- dim(anc)[2]
for(level in 1:max_len) {
col <- paste0("Level", level)
dom <- anc %>% group_by_(col) %>%
filter(sum(Population) / total_pop > threshold) %>%
select_(col)
dom <- dom[!is.na(dom), ]
if(dim(dom)[1] == 0) break
else res <- max(dom)
}
return(res)
}
dominant(ancestry(edges), pop_subdf)
dominant(ancestry(edges), pop_subdf, 0.5)
dominant(ancestry(edges), pop_subdf, 0.1)
pop_subdf
sweep_sequence(pop_df)
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- lag_gens / median(diff(unique(pop_df$Generation)))
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df)
sweep_sequence(pop_df, lag_gens = 2)
warnings()
pop_df$Generation
geno_dist(pop_df)
geno_dist <- function(pop_df) {
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(NewFrequency = Population / sum(Population)) %>%
ungroup()
pop_subdf <- filter(pop_df, Generation == max(Generation))
pop_subdf <- filter(pop_subdf, Frequency > 0)
dist <- sort(pop_subdf$NewFrequency)
return(dist)
}
geno_dist(pop_df)
sweep_seq <- sweep_sequence(pop_df, lag_gens = 2)
sweep_df <- data.frame(y = sweep_seq, x = (1:length(sweep_seq))/length(sweep_seq))
plot(y ~ x , data = sweep_df, type = "l", col = "black")
reflect_on_diagonal(matrix(1:9, ncol = 3))
reflect_on_diagonal(matrix(1:12, ncol = 3))
dim(matrix(1:12, ncol = 3))
dim(matrix(1:12, ncol = 3))[1]
reflect_on_diagonal <- function(matrix) {
if(dim(matrix)[1] != dim(matrix)[2]) stop("Not a square matrix")
matrix[lower.tri(matrix)] <- t(matrix)[lower.tri(t(matrix))]
diag(matrix) <- 0
return(matrix)
}
reflect_on_diagonal(matrix(1:12, ncol = 3))
reflect_on_diagonal(matrix(1:9, ncol = 3))
pop_subdf
sweep_seq
pop_df
phylo <- read_delim("data/driver_phylo.dat", "\t")
phylo <- filter(phylo, CellsPerSample == -1)
pop_df <- get_population_df(phylo)
sweep_seq <- sweep_sequence(pop_df, lag_gens = 2)
sweep_seq
pop_df
unique(pop_df$Generation)
sweep_seq
sweep_sequence(pop_df, lag_gens = 2)
sweep_sequence(pop_df, breaks = 5)
sweep_sequence(pop_df, breaks = 6)
sweep_sequence(pop_df, breaks = 10)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 10)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 5)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_gens = 2)
warnings()
median(diff(unique(pop_df$Generation)))
round(length(unique(pop_df$Generation))/10)
round(length(unique(pop_df$Generation))/6)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 60)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "proportions", breaks = 7)
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- lag_gens / median(diff(unique(pop_df$Generation)))
lag <- max(lag, 1)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df, lag_type = "proportions", breaks = 60)
sweep_seq <- sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
identical(1,1)
sweep_seq1 <- sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_seq2 <- sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
identical(sweep_seq1, sweep_seq2)
round(length(unique(pop_df$Generation))/6)
2 / median(diff(unique(pop_df$Generation)))
round(1.98)
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- round(lag_gens / median(diff(unique(pop_df$Generation))))
lag <- max(lag, 1)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
round(length(unique(pop_df$Generation))/6)
round(2 / median(diff(unique(pop_df$Generation))))
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- round(lag_gens / median(diff(unique(pop_df$Generation))))
lag <- max(lag, 1)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
#pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
round(length(unique(pop_df$Generation))/6)
pop_df_store <- pop_df
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
pop_df <- filter(pop_df, Identity != 0)
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
round(length(unique(pop_df$Generation))/breaks)
round(length(unique(pop_df$Generation))/6)
round(2 / median(diff(unique(pop_df$Generation))))
length(unique(pop_df$Generation))
length(unique(pop_df_store$Generation))
pop_df_store
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove generations with total frequency zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Frequency) > 0) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- round(lag_gens / median(diff(unique(pop_df$Generation))))
lag <- max(lag, 1)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
#pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
pop_df <- pop_df_store
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
round(length(unique(pop_df$Generation))/6)
round(length(unique(pop_df$Generation))/5)
round(length(unique(pop_df$Generation))/10)
round(length(unique(pop_df$Generation))/7)
round(1 / median(diff(unique(pop_df$Generation))))
round(2 / median(diff(unique(pop_df$Generation))))
round(3 / median(diff(unique(pop_df$Generation))))
pop_df <- get_population_df(phylo)
sweep_seq1 <- sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_seq2 <- sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
identical(sweep_seq1, sweep_seq2)
sweep_df <- data.frame(y = sweep_seq, x = (1:length(sweep_seq2))/length(sweep_seq2))
plot(y ~ x , data = sweep_df, type = "l")
sweep_df
sweep_df <- data.frame(y = sweep_seq2, x = (1:length(sweep_seq2))/length(sweep_seq2))
plot(y ~ x , data = sweep_df, type = "l")
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# remove generations with total population zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Population) > 0) %>%
ungroup()
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# remove frequencies of common ancestor:
pop_df <- filter(pop_df, Identity != 0)
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- round(lag_gens / median(diff(unique(pop_df$Generation))))
lag <- max(lag, 1)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
#pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
sweep_sequence <- function(pop_df, lag_type = "generations", breaks = 10, lag_gens = 500) { #*
if(lag_type != "generations" & lag_type != "proportions") stop("Lag type must be 'generations' or 'proportions'")
# remove generations with total population zero:
pop_df <- pop_df %>% group_by(Generation) %>%
filter(sum(Population) > 0) %>%
ungroup()
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
# calculate lag in terms of generations:
if(lag_type == "proportions") lag <- round(length(unique(pop_df$Generation))/breaks)
else lag <- round(lag_gens / median(diff(unique(pop_df$Generation))))
lag <- max(lag, 1)
# calculate differences between frequencies separated by lag generations:
pop_df <- group_by(pop_df, Identity) %>%
mutate(diff = (Frequency - lag(Frequency, n = lag))^2)
# find sum of differences for each generation:
#pop_df <- filter(pop_df, Generation >= min(pop_df$Generation) + (max(pop_df$Generation) - min(pop_df$Generation))/breaks)
sum_df <- group_by(pop_df, Generation) %>%
summarise(sum_diff = sum(diff, na.rm=TRUE))
return(sum_df$sum_diff)
}
sweep_sequence(pop_df, lag_type = "proportions", breaks = 6)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 2)
sweep_sequence(pop_df, lag_type = "generations", lag_gens = 5)
round(5 / median(diff(unique(pop_df$Generation))))
lag(1:10,1)
lag(1:10,5)
1:10 - lag(1:10,5)
sum(NA, na.rm=TRUE)
geno_dist(pop_df)
dist <- geno_dist(pop_df)
plot(dist)
barplot(dist)
barplot(dist, ylim = c(0, 1))
geno_dist <- function(pop_df, generation = NA) {
if(is.na(generation)) generation == max(pop_df$Generation)
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
pop_subdf <- filter(pop_df, Generation == generation)
pop_subdf <- filter(pop_subdf, Frequency > 0)
dist <- sort(pop_subdf$NewFrequency)
return(dist)
}
geno_dist(pop_df)
geno_dist <- function(pop_df, generation = NA) {
if(is.na(generation)) generation == max(pop_df$Generation)
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
pop_subdf <- filter(pop_df, Generation == generation)
pop_subdf <- filter(pop_subdf, Frequency > 0)
dist <- sort(pop_subdf$Frequency)
return(dist)
}
geno_dist(pop_df)
geno_dist(pop_df, 0)
geno_dist <- function(pop_df, generation = NA) {
if(is.na(generation)) generation = max(pop_df$Generation)
# add frequency column:
pop_df <- pop_df %>% group_by(Generation) %>%
mutate(Frequency = Population / sum(Population)) %>%
ungroup()
pop_subdf <- filter(pop_df, Generation == generation)
pop_subdf <- filter(pop_subdf, Frequency > 0)
dist <- sort(pop_subdf$Frequency)
return(dist)
}
geno_dist(pop_df)
dist <- geno_dist(pop_df)
barplot(dist, ylim = c(0, 1))
View(pop_df)
phylo <- read_delim("data/driver_phylo.dat", "\t")
phylo <- filter(phylo, CellsPerSample == -1)
pop_df <- get_population_df(phylo)
View(phylo)
library(devtools)
document()
check()
check()
check()
check()
check()
phylo <- read_delim("data/driver_phylo.dat", "\t")
phylo <- filter(phylo, CellsPerSample == -1)
edges <- get_edges(phylo)
ancestry <- function(edges) {
start <- find_start_node(edges)
anc <- data.frame(V1 = start)
gens_list <- unique(edges$Identity)
for(gen in 1:length(gens_list)) {
now <- as.numeric(edges[gen, "Identity"])
res <- now
repeat {
if(move_up(edges, now) == now) break
now <- move_up(edges, now)
res <- c(now, res)
}
res <- as.data.frame(t(res))
anc <- bind_rows(anc, res)
}
max_len <- dim(anc)[2]
colnames(anc) <- paste0("Level", 1:max_len)
gens_list <- c(start, gens_list)
anc <- cbind(anc, Identity = gens_list)
rownames(anc) <- NULL
return(anc)
}
ancestry(edges)
phylo <- read_delim("data/driver_phylo.dat", "\t")
save(phylo, file="data/driver_phylo.RData")
matrix <- read.delim("data/driver_matrix.dat", header=FALSE)
save(matrix, file="data/driver_matrix.RData")
output <- read_delim("data/output.dat", "\t", trim_ws = TRUE)
output <- read_delim("data/output.dat", "\t", trim_ws = TRUE)
output <- read_delim("data/output.dat", "\t", trim_ws = TRUE)
save(output, file="data/output.RData")
document()
check()
document()
document()
document()
tree <- get_tree_from_matrix(driver_matrix)
check()
document()
data(driver_matrix)
data(driver_matri)
document()
check()
check()
tree <- get_tree_from_matrix(driver_matrix)
data("driver_matrix")
tree <- get_tree_from_matrix(driver_matrix)
check()
load("/Users/rnoble/Documents/GitHub/ggmuller/data/example_edges.RData")
load("/Users/rnoble/Documents/GitHub/demonanalysis/data/driver_matrix.RData")
driver_matrix <- matrix
save(driver_matrix, file="data/driver_matrix.RData")
check()
load("/Users/rnoble/Documents/GitHub/demonanalysis/data/driver_phylo.RData")
driver_phylo <- phylo
save(driver_phylo, file="data/driver_phylo.RData")
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
dim(driver_matrix)
View(driver_matrix)
driver_matrix[, 66]
View(driver_matrix[, -66])
driver_matrix <- driver_matrix[, -66]
save(driver_matrixa, file="data/driver_matrix.RData")
save(driver_matrix, file="data/driver_matrix.RData")
check()
check()
check()
?readr
readr_example
readr_example("mtcars.csv")
read_csv(readr_example("mtcars.csv"))
read_csv
read_delimited
?source_name
check()
?system.file
system.file("extdata", "output.dat", package = "demonanalysis")
check()
check()
library(readr)
output_allele_cum_dist <- read_csv("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_cum_dist.dat")
View(output_allele_cum_dist)
library(readr)
output_allele_cum_dist <- read_csv("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_cum_dist.dat", sep = "/t")
View(output_allele_cum_dist)
?read_csv
library(readr)
output_allele_cum_dist <- read_delim("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_cum_dist.dat", "/t")
View(output_allele_cum_dist)
library(readr)
output_allele_cum_dist <- read_delim("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_cum_dist.dat", "\t")
View(output_allele_cum_dist)
save(output_allele_cum_dist, file="data/output_allele_cum_dist.RData")
library(readr)
output_allele_dist <- read_csv("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_dist.dat", sep = "/t")
View(output_allele_dist)
library(readr)
output_allele_hist <- read_csv("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_hist.dat", sep = "/t")
View(output_allele_hist)
library(readr)
output_allele_hist <- read_delim("~/Documents/GitHub/demonanalysis/inst/extdata/output_allele_hist.dat", "\t")
View(output_allele_hist)
save(output_allele_hist, file="data/output_allele_hist.RData")
check()
check()
check()
check()
document()
check()
check()
check()
?as.dist
?njs
check()
?ape
check()
check()
check()
check()
document()
check()
check()
check()
check()
document()
