rm(plot_logit_freq_dist)
plot_all_charts(path, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_logit_freq_dist(paste0(path2, "/output_allele_counts.dat"))
plot_all_charts(path2, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, max_size = 20, output_filename = "all_charts_size20", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts_size", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
plot_all_charts(path2, max_size = 20, output_filename = "all_charts_size20", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
df_test <- data.frame(size = 1:20, count = exp(-(1:20)))
plot_first_inc_moment(df_test$size, df_test$count)
plot_first_inc_moment(df_test$size, df_test$count, max_size = 20)
df_test_censored <- filter(df_test, size <=10)
plot_first_inc_moment(df_test_censored$size, df_test_censored$count, max_size = 20)
plot_first_inc_moment(paste0(path2, "/output_allele_counts.dat"))
df1 <- read_delim_special(paste0(path2, "/output_allele_counts.dat"))
df1 <- filter(df1, Generation == max(Generation))
plot_first_inc_moment(df1$Size, df1$Count, xlab = "clone size", max_size = 100)
df1_censored <- filter(df1, Size <= 60)
plot_first_inc_moment(df1_censored$Size, df1_censored$Count, xlab = "clone size", max_size = 100)
df1_censored <- filter(df1, Size <= 100)
plot_first_inc_moment(df1_censored$Size, df1_censored$Count, xlab = "clone size", max_size = 100)
plot_all_charts(path2, max_size = 1000, output_filename = "all_charts_size1000", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
2^13
library(demonanalysis)
library(readr)
data_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May20th"
data <- read_csv(paste0(data_dir, "/data.csv"), guess_max = 1E4)
data <- read_csv(paste0(data_dir, "/dataBigK.csv"), guess_max = 1E4)
summary <- read_csv(paste0(data_dir, "/summaryBigK.csv"))
View(summary)
summary <- read_csv(paste0(data_dir, "/summaryBigK.csv"), guess_max = 1E4)
num_parameters <- 18
cor_summary <- get_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = 50)
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = 50) # summary dataframe of correlations with "waiting_time", including all cells
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = 50) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
plot_corr_outcome_versus_period(cor_summary)
View(cor_summary)
unique(cor_summary$K)
rainbow(3)
plot_corr_outcome_versus_period <- function(df, col_name = "DriverDiversity", output_filename = "corr_outcome_versus_period", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename,".png"), width = 800, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename,".pdf"), width = 8, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(2, ceiling(length(start_size_range) / 2)))
par(mar=c(4.5, 5, 1.5, 1))
for(i in 1:length(start_size_range)) {
start_size_val <- start_size_range[i]
title <- paste("Measure at ", start_size_val, " cells", sep = "")
for(j in 1:length(K_range)) {
K_val <- K_range[j])
if(j == 1) {
plot(1, type = "n", xlim = c(0, 1), ylim = c(-1, 1),
main = title, xlab = "projection period", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs tumour size"))
if(i == 1) legend("bottomleft", as.character(K_range), title = "K", ncol = 3,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols, lwd = 2)
}
df_filtered <- filter(df, start_size == start_size_val, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$gap,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_corr_outcome_versus_period <- function(df, col_name = "DriverDiversity", output_filename = "corr_outcome_versus_period", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename,".png"), width = 800, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename,".pdf"), width = 8, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(2, ceiling(length(start_size_range) / 2)))
par(mar=c(4.5, 5, 1.5, 1))
for(i in 1:length(start_size_range)) {
start_size_val <- start_size_range[i]
title <- paste("Measure at ", start_size_val, " cells", sep = "")
for(j in 1:length(K_range)) {
K_val <- K_range[j])
if(j == 1) {
plot(1, type = "n", xlim = c(0, 1), ylim = c(-1, 1),
main = title, xlab = "projection period", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs tumour size"))
if(i == 1) legend("bottomleft", as.character(K_range), title = "K", ncol = 3,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols, lwd = 2)
}
df_filtered <- filter(df, start_size == start_size_val, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$gap,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_corr_outcome_versus_period <- function(df, col_name = "DriverDiversity", output_filename = "corr_outcome_versus_period", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename,".png"), width = 800, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename,".pdf"), width = 8, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(2, ceiling(length(start_size_range) / 2)))
par(mar=c(4.5, 5, 1.5, 1))
for(i in 1:length(start_size_range)) {
start_size_val <- start_size_range[i]
title <- paste("Measure at ", start_size_val, " cells", sep = "")
for(j in 1:length(K_range)) {
K_val <- K_range[j]
if(j == 1) {
plot(1, type = "n", xlim = c(0, 1), ylim = c(-1, 1),
main = title, xlab = "projection period", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs tumour size"))
if(i == 1) legend("bottomleft", as.character(K_range), title = "K", ncol = 3,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols, lwd = 2)
}
df_filtered <- filter(df, start_size == start_size_val, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$gap,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_corr_outcome_versus_period(cor_summary)
plot_corr_outcome_versus_period <- function(df, col_name = "DriverDiversity", output_filename = "corr_outcome_versus_period", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename,".png"), width = 800, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename,".pdf"), width = 8, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(2, ceiling(length(start_size_range) / 2)))
par(mar=c(4.5, 5, 1.5, 1))
for(i in 1:length(start_size_range)) {
start_size_val <- start_size_range[i]
title <- paste("Measure at ", start_size_val, " cells", sep = "")
for(j in 1:length(K_range)) {
K_val <- K_range[j]
if(j == 1) {
plot(1, type = "n", xlim = c(0, 1), ylim = c(-1, 1),
main = title, xlab = "projection period", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs tumour size"))
if(i == 1) legend("bottomleft", as.character(K_range), title = "K", ncol = 3,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols, lwd = 2)
}
df_filtered <- filter(df, start_size == start_size_val, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$gap,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_corr_outcome_versus_period(cor_summary)
colnames(cor_summary)
library(dplyr)
plot_corr_outcome_versus_period(cor_summary)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
plot_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May20th"
png(paste0(plot_dir, "/correlations_type0_edge0.csv"), width = 800, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type0_edge0.png"), width = 800, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type0_edge0.png"), width = 1600, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type0_edge0.png"), width = 1200, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type0_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
min_count <- 10
cor_summary <- get_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count)
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time", including all cells
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
png(paste0(plot_dir, "/correlations_type0_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
min_count <- 20
cor_summary <- get_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count)
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time", including all cells
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
png(paste0(plot_dir, "/correlations_type0_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type0_edge1.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 0, migration_edge_only == 1))
dev.off()
png(paste0(plot_dir, "/correlations_type1_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 1, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type1_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 1, migration_edge_only == 1))
dev.off()
dim(filter(cor_summary, migration_type == 1, migration_edge_only == 1))
png(paste0(plot_dir, "/correlations_type1_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 2, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type2_edge0.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 2, migration_edge_only == 0))
dev.off()
png(paste0(plot_dir, "/correlations_type2_edge2.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 2, migration_edge_only == 2))
dev.off()
png(paste0(plot_dir, "/correlations_type2_edge1.png"), width = 1500, height = 500, res = 100)
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == 2, migration_edge_only == 1))
dev.off()
detach("package:demonanalysis", unload=TRUE)
library(demonanalysis)
for(i in c(0, 2)) for(j in 0:1) {
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j, ".png"), output_dir = plot_dir)
}
for(i in c(0, 2)) for(j in 0:1) {
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j), output_dir = plot_dir)
}
detach("package:demonanalysis", unload=TRUE)
library(devtools)
install("demonanalysis")
plot_corr_outcome_versus_period
library(demonanalysis)
plot_corr_outcome_versus_period
detach("package:demonanalysis", unload=TRUE)
install("/Users/rnoble/Documents/GitHub/demonanalysis")
library(demonanalysis)
plot_corr_outcome_versus_period
detach("package:demonanalysis", unload=TRUE)
install("/Users/rnoble/Documents/GitHub/demonanalysis")
library(demonanalysis)
plot_corr_outcome_versus_period
for(i in c(0, 2)) for(j in 0:1) {
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j), output_dir = plot_dir)
}
detach("package:demonanalysis", unload=TRUE)
library(demonanalysis)
plot_corr_outcome_versus_period
library(demonanalysis)
library(readr)
library(dplyr)
plot_corr_outcome_versus_period
data_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May20th"
plot_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May20th"
num_parameters <- 18
min_count <- 20
data <- read_csv(paste0(data_dir, "/dataBigK.csv"), guess_max = 1E4)
summary <- read_csv(paste0(data_dir, "/summaryBigK.csv"), guess_max = 1E4)
cor_summary <- get_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count)
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time", including all cells
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
for(i in c(0, 2)) for(j in 0:1) {
plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j), output_dir = plot_dir)
}
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
plot_corr_waiting_time_versus_start_size <- function(df, col_name = "DriverDiversity", output_filename = "corr_waiting_time_versus_start_size", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename, ".png"), width = 500, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename, ".pdf"), width = 5, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(1, 1))
par(mar=c(4, 4, 2, 2))
for(j in 1:length(K_range)) {
K_val <- K_range[j]
if(j == 1) {
plot(1, type = "n", xlim = c(0, 6E3), ylim = c(-1, 1),
main = "", xlab = "tumour size at measurement", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs waiting time"))
legend("topleft", as.character(K_range), title = "K", ncol = 3, lwd = 2,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols)
}
df_filtered <- filter(df, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$start_size,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
plot_corr_waiting_time_versus_start_size <- function(df, col_name = "DriverDiversity", output_filename = "corr_waiting_time_versus_start_size", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename, ".png"), width = 500, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename, ".pdf"), width = 5, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(1, 1))
par(mar=c(4, 4, 2, 2))
for(j in 1:length(K_range)) {
K_val <- K_range[j]
if(j == 1) {
plot(1, type = "n", xlim = c(0, 2e5), ylim = c(-1, 1),
main = "", xlab = "tumour size at measurement", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs waiting time"))
legend("topleft", as.character(K_range), title = "K", ncol = 3, lwd = 2,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols)
}
df_filtered <- filter(df, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$start_size,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
plot_corr_waiting_time_versus_start_size <- function(df, col_name = "DriverDiversity", output_filename = "corr_waiting_time_versus_start_size", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename, ".png"), width = 500, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename, ".pdf"), width = 5, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(1, 1))
par(mar=c(4, 4, 2, 2))
for(j in 1:length(K_range)) {
K_val <- K_range[j]
if(j == 1) {
plot(1, type = "n", xlim = c(0, 2e5), ylim = c(-1, 1),
main = "", xlab = "tumour size at measurement", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs waiting time"))
legend("topleft", as.character(K_range), title = "K", ncol = 3, lwd = 2,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols)
}
df_filtered <- filter(df, K == K_val)
points(df_filtered[[col_name]] ~ df_filtered$start_size,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
View(wait_cor_summary)
?sort
wait_cor_summary <- order(wait_cor_summary, K, migration_type, migration_edge_only, start_size)
wait_cor_summary <- wait_cor_summary[order(K, migration_type, migration_edge_only, start_size), ]
wait_cor_summary <- arrange(wait_cor_summary, K, migration_type, migration_edge_only, start_size)
plot_corr_waiting_time_versus_start_size <- function(df, col_name = "DriverDiversity", output_filename = "corr_waiting_time_versus_start_size", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename, ".png"), width = 500, height = 500, res = 100)
else pdf(paste0(output_dir, output_filename, ".pdf"), width = 5, height = 5)
}
if(substr(col_name, 1, 4) != "Cor_") col_name <- paste0("Cor_", col_name)
col_name_suffix <- substr(col_name, 5, nchar(col_name))
start_size_range <- unique(df$start_size)
K_range <- unique(df$K)
cols <- rainbow(length(K_range))
par(mfrow=c(1, 1))
par(mar=c(4, 4, 2, 2))
for(j in 1:length(K_range)) {
K_val <- K_range[j]
if(j == 1) {
plot(1, type = "n", xlim = c(0, 2e5), ylim = c(-1, 1),
main = "", xlab = "tumour size at measurement", ylab = paste0("correlation coefficient:\n", col_name_suffix, " vs waiting time"))
legend("topleft", as.character(K_range), title = "K", ncol = 3, lwd = 2,
xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "n", lty = 1, col = cols)
}
df_filtered <- filter(df, K == K_val)
lines(df_filtered[[col_name]] ~ df_filtered$start_size,
col = cols[j], lwd = 2)
abline(h = 0, untf = FALSE, lty = 3)
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_start_size(filter(wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
colnames(summary)
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("depth_wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j), "DriverDiversityFrom1SamplesAtDepth",
output_filename = paste0("depth_wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j, K == 32), "DriverDiversityFrom1SamplesAtDepth",
output_filename = paste0("depth_wait_correlations_type", i, "_edge", j), output_dir = plot_dir)
for(k in 2^c(5, 9, 13)) for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j, K == k), "DriverDiversityFrom1SamplesAtDepth",
output_filename = paste0("depth_wait_correlations_K", k, "_type", i, "_edge", j), output_dir = plot_dir)
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 8000))
df1 <- filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 8000)
View(df1)
max(df1$outcome)
max(df1$outcome, na.rm = TRUE)
min(df1$outcome, na.rm = TRUE)
max(df1$DriverDiversity, na.rm = TRUE)
min(df1$DriverDiversity, na.rm = TRUE)
df2 <- data.frame(x=1:3, y = c(1,3,4))
lm(df2$y ~ df2$x)
df2 <- data.frame(x=1:3, y = c(1,3,NA))
lm(df2$y ~ df2$x)
plot_scatter_outcome_diversity <- function(df, col_name = "DriverDiversity", output_filename = "scatter_outcome_diversity", file_type = "png", output_dir = NA) {
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir, output_filename, ".png"), width = 1000, height = 400, res = 100)
else pdf(paste0(output_dir, output_filename, ".pdf"), width = 10, height = 4)
}
gap_list <- unique(df$gap)
par(mfrow=c(2, ceiling(length(gap_list)/2)))
par(mar=c(4.5,5,2,1))
for(gap in gap_list) {
plot_data <- df[which(df$gap == gap), ]
title <- paste("Forecast period ", gap, sep = "")
if(sum(!is.na(plot_data$outcome)) == 0) plot(1, type = "n",
main = "", xlab = col_name, ylab = "final tumour size")
else {
plot(plot_data$outcome ~ plot_data[[col_name]], col = "black",
main = "", xlab = col_name, ylab = "final tumour size")
mod1 <- lm(plot_data$outcome ~ plot_data[[col_name]])
#abline(mod1, lty = 2)
}
title(title, line = 0.5)
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 8000))
unique(summary$gap)
unique(summary$start_size)
plot(df1$outcome ~ df1$DriverDiversity, col = "black",
main = "", xlab = col_name, ylab = "final tumour size")
plot(df1$outcome ~ df1$DriverDiversity, col = "black",
main = "", xlab = DriverDiversity, ylab = "final tumour size")
plot(df1$outcome ~ df1$DriverDiversity, col = "black",
main = "", xlab = "DriverDiversity", ylab = "final tumour size")
plot(df2$y ~ df2$x)
dev.off()
dev.off()
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 8000))
for(k in 2^c(5, 9, 13)) for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j, K == k), "DriverDiversityFrom1SamplesAtDepth",
output_filename = paste0("depth_wait_correlations_K", k, "_type", i, "_edge", j), output_dir = plot_dir)
for(k in 2^c(5, 9, 13)) for(i in c(0, 2)) for(j in 0:1) plot_corr_waiting_time_versus_depth(filter(depth_wait_cor_summary, migration_type == i, migration_edge_only == j, K == k), "DriverDiversityFrom1SamplesAtDepth",
output_filename = paste0("depth_wait_correlations_K", k, "_type", i, "_edge", j), output_dir = plot_dir)
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 8000))
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 32000))
rm(plot_scatter_waiting_time_diversity())
rm(plot_scatter_waiting_time_diversity)
rm(plot_scatter_outcome_diversity)
plot_scatter_outcome_diversity(filter(summary, migration_type == 0, migration_edge_only == 0, K == 32, start_size == 32000))
find_correlations <- function(summary, factor1, factor2, result_name, min_count) {
summary %>%
mutate_(variance = interp(~var(var1), var1 = as.name(factor2))) %>%
filter(variance > 0) %>% # to avoid warnings when all values of factor2 are identical
mutate_(count1 = interp(~length(var1), var1 = as.name(factor1)),
count2 = interp(~length(var2), var2 = as.name(factor2))) %>%
filter(count1 >= min_count, count2 >= min_count) %>%
summarise_(temp_name = interp(~cor(var1, var2, method = "spearman"), var1 = as.name(factor1), var2 = as.name(factor2))) %>%
rename_(.dots = setNames("temp_name", paste0(result_name)))
}
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time", including all cells
wait_cor_summary <- arrange(wait_cor_summary, K, migration_type, migration_edge_only, start_size)
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
for(i in c(0, 2)) for(j in 0:1) plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j), output_dir = plot_dir)
View(find_correlations)
rm(find_correlations)
rm(plot_corr_waiting_time_versus_depth)
rm(plot_corr_waiting_time_versus_start_size)
library(demonanalysis)
library(readr)
library(dplyr)
data_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/May20th"
plot_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May20th"
num_parameters <- 18
min_count <- 20
data <- read_csv(paste0(data_dir, "/dataBigK.csv"), guess_max = 1E4)
summary <- read_csv(paste0(data_dir, "/summaryBigK.csv"), guess_max = 1E4)
cor_summary <- get_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count)
wait_cor_summary <- get_wait_cor_summary(summary, c("DriverDiversity", "DriverEdgeDiversity"), num_parameters = num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time", including all cells
wait_cor_summary <- arrange(wait_cor_summary, K, migration_type, migration_edge_only, start_size)
depth_wait_cor_summary <- get_wait_cor_summary(summary, c(paste0("DriverDiversityFrom1SamplesAtDepth", 0:10), paste0("DriverDiversityFrom4SamplesAtDepth", 0:10)), num_parameters, min_count = min_count) # summary dataframe of correlations with "waiting_time" for different biopsy protocols
for(i in c(0, 2)) for(j in 0:1) plot_corr_outcome_versus_period(filter(cor_summary, migration_type == i, migration_edge_only == j),
output_filename = paste0("correlations_type", i, "_edge", j), output_dir = plot_dir)
find_correlations()
find_correlations
