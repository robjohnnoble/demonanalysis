geom_point(aes(x = n, y = D), filter(real_points, minimal == 1), size = 2) +
facet_grid(rows = vars(migration_type)) +
scale_color_manual(values = c("red", "gold", "blue", "magenta"), name = "gland\nsize") +
scale_shape_manual(values=0:3, name = "gland\nsize") +
theme(strip.background = element_blank(), strip.text.x = element_blank(), strip.text.y = element_blank()) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
return(g2)
}
g2 <- K_plot("case_B", 0)
print(g2)
#facet_df$migration_edge_only = factor(facet_df$migration_edge_only, levels=c(1, 0))
#facet_df$migration_type = factor(facet_df$migration_type, levels=c(2, 0))
K_plot <- function(cas, mig) {
facet_df <- filter(combined_cases, case == cas, migration_edge_only == mig)
g2 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(K), shape = as.factor(K)),
facet_df, alpha=0.25) +
# facet_grid(case ~ migration_edge_only, labeller = label_both) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1), size = 2) +
#facet_grid(rows = vars(migration_type)) +
scale_color_manual(values = c("red", "gold", "blue", "magenta"), name = "gland\nsize") +
scale_shape_manual(values=0:3, name = "gland\nsize") +
theme(strip.background = element_blank(), strip.text.x = element_blank(), strip.text.y = element_blank()) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
return(g2)
}
g2 <- K_plot("case_B", 0)
print(g2)
g2 <- K_plot("caseB", 0)
print(g2)
g3 <- K_plot("caseC", 1)
print(g3)
grid.arrange(g2, g3)
pdf(paste0(output_dir, "clusters_varied_K.pdf"), width = 3, height = 4)
grid.arrange(g2, g3)
dev.off()
pdf(paste0(output_dir, "clusters_varied_K.pdf"), width = 3.5, height = 4.5)
grid.arrange(g2, g3)
dev.off()
pdf(paste0(output_dir, "clusters_varied_K.pdf"), width = 3.2, height = 4.5)
grid.arrange(g2, g3)
dev.off()
pdf(paste0(output_dir, "clusters_varied_K.pdf"), width = 3.2, height = 4.5)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3)
dev.off()
print(g1)
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.1, nudge_y=0.05) +
scale_color_manual(values = c("red", "yellow3", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
print(g1)
pdf(paste0(output_dir, "clusters.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.1, nudge_y=0.05) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
print(g1)
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.3) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.1, nudge_y=0.05) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.4) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.1, nudge_y=0.05) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.1, nudge_y=0.05) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
8.086067e-11 * 2^13
8.086067e-11 * 2^13 * 365/5
2^13
8.086067e-11 * (2^13)^2 * 365/5
8.086067e-11 * (2^13)^2
1 / (8.086067e-11 * (2^13)^2)
8.086067e-11 * (2^13)^2 * 365
plot_counts(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE), ylim = c(0, 10))
plot.new()
par(mar = c(4,4,1,1))
plot_counts(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE), ylim = c(0, 10))
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 10))
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot.new()
par(mfrow = c(2, 2))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency", ylab = "count")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
par(mfrow = c(2, 2))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
par(mfrow = c(2, 2))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100))
par(mfrow = c(2, 2))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot.new()
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
par(mfrow = c(2, 2))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100))
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100))
par(mar = c(4,4,1,1))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseE_seed_99/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration) %>% summarise(n = n())
colnames(combined_cases)
combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration) %>% summarise(n = n(), init_migration_rate = slice(init_migration_rate, 1), MigrationRate = slice(MigrationRate, 1))
combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration) %>% summarise(n = n(), init_migration_rate = mean(init_migration_rate), MigrationRate = mean(MigrationRate))
sum1 <- combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration) %>% summarise(n = n(), init_migration_rate = mean(init_migration_rate), MigrationRate = mean(MigrationRate))
View(sum1)
sum1 <- combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration, baseline_death_rate) %>% summarise(n = n(), init_migration_rate = mean(init_migration_rate), MigrationRate = mean(MigrationRate))
sum1 <- combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration, baseline_death_rate) %>% summarise(n = n(), init_migration_rate = mean(init_migration_rate), MigrationRate = mean(MigrationRate), Nem = K * mean(MigrationRate))
sum1 <- combined_cases %>% group_by(migration_type, migration_edge_only, K, s_driver_birth, s_driver_migration, baseline_death_rate) %>% summarise(n = n(), init_migration_rate = mean(init_migration_rate), MigrationRate = mean(MigrationRate), Nem = mean(K * MigrationRate))
par(mar = c(4,4,1,1))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency", main = "Non-spatial")
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 5, height = 3)
par(mar = c(4,4,1,1))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
dev.off()
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 5, height = 3)
par(mar = c(4,4,1,1))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
dev.off()
par(mar = c(4,4,1,1))
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 5, height = 3)
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
dev.off()
par(mfrow = c(2, 2))
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 5, height = 3)
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
dev.off()
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 5, height = 3)
par(mar = c(4,4,1,1))
par(mfrow = c(2, 2))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
dev.off()
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar132019_Invasion_NoNormalCells")
#' Create a set of plots for Figure 2
plot_figure2 <- function(path, output_filename = NA, file_type = "png", output_dir = NA, trim = -1) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
Muller_df <- muller_df_from_file(paste0(path, "driver_phylo.dat"))
if(class(Muller_df) != "data.frame") return(NA)
long_palette <- c("#8A7C64", "#599861", "#89C5DA", "#DA5724", "#74D944", "#CE50CA",
"#3F4921", "#C0717C", "#CBD588", "#5F7FC7", "#673770", "#D3D93E",
"#38333E", "#508578", "#D7C1B1", "#689030", "#AD6F3B", "#CD9BCD",
"#D14285", "#6DDE88", "#652926", "#7FDCC0", "#C84248", "#8569D5",
"#5E738F", "#D1A33D")
dd <- 0:25
dd.col <- long_palette
names(dd.col) <- dd
h1 <- Muller_plot(Muller_df, colour_by = "col_index", palette = dd.col)
image_df <- image_df_from_grid_file(paste0(path, "output_driversgrid.dat"), trim)
image_df[which(image_df$z > 0), "z"] <- as.character(image_df[which(image_df$z > 0), "z"] %% 25 + 1)
g1 <- grid_plot(image_df, palette = dd.col, discrete = TRUE)
origins_df <- read_delim_special(paste0(path, "output_genotype_properties.dat"))
origins_df <- filter(origins_df, Descendants > 100)
origins_df <- mutate(origins_df, DriverIdentity = ifelse(DriverIdentity == 0, 0, as.character(DriverIdentity %% 25 + 1)))
f1 <- plot_allelecount_vs_origintime(origins_df, colour_by = "DriverIdentity",
palette = dd.col, discrete = TRUE, print = FALSE)
f1 <- f1 + theme(legend.position="none")
if(!is.na(output_filename)) print(paste0("Created all plots for file ", output_filename), quote = FALSE)
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 2000, height = 700, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 20, height = 7)
}
lay <- rbind(c(1,1,2,3))
print(grid.arrange(h1, g1, f1, layout_matrix = lay))
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
if(!is.na(output_filename)) print("Saved the plot", quote = FALSE)
}
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar132019_Invasion_NoNormalCells")
#' Create a set of plots for Figure 2
plot_figure2 <- function(path, output_filename = NA, file_type = "png", output_dir = NA, trim = -1) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
Muller_df <- muller_df_from_file(paste0(path, "driver_phylo.dat"))
if(class(Muller_df) != "data.frame") return(NA)
long_palette <- c("#8A7C64", "#599861", "#89C5DA", "#DA5724", "#74D944", "#CE50CA",
"#3F4921", "#C0717C", "#CBD588", "#5F7FC7", "#673770", "#D3D93E",
"#38333E", "#508578", "#D7C1B1", "#689030", "#AD6F3B", "#CD9BCD",
"#D14285", "#6DDE88", "#652926", "#7FDCC0", "#C84248", "#8569D5",
"#5E738F", "#D1A33D")
dd <- 0:25
dd.col <- long_palette
names(dd.col) <- dd
h1 <- Muller_plot(Muller_df, colour_by = "col_index", palette = dd.col)
image_df <- image_df_from_grid_file(paste0(path, "output_driversgrid.dat"), trim)
image_df[which(image_df$z > 0), "z"] <- as.character(image_df[which(image_df$z > 0), "z"] %% 25 + 1)
g1 <- grid_plot(image_df, palette = dd.col, discrete = TRUE)
origins_df <- read_delim_special(paste0(path, "output_genotype_properties.dat"))
origins_df <- filter(origins_df, Descendants > 100)
origins_df <- mutate(origins_df, DriverIdentity = ifelse(DriverIdentity == 0, 0, as.character(DriverIdentity %% 25 + 1)))
f1 <- plot_allelecount_vs_origintime(origins_df, colour_by = "DriverIdentity",
palette = dd.col, discrete = TRUE, print_plot = FALSE)
f1 <- f1 + theme(legend.position="none")
if(!is.na(output_filename)) print(paste0("Created all plots for file ", output_filename), quote = FALSE)
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 2000, height = 700, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 20, height = 7)
}
lay <- rbind(c(1,1,2,3))
print(grid.arrange(h1, g1, f1, layout_matrix = lay))
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
if(!is.na(output_filename)) print("Saved the plot", quote = FALSE)
}
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar132019_Invasion_NoNormalCells")
#' @importFrom grDevices col2rgb
#'
#' @export
#'
#' @examples
#' plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
#' package = "demonanalysis", mustWork = TRUE))
#' plot_allelecount_vs_origintime(system.file("extdata", "output_genotype_properties.dat",
#' package = "demonanalysis", mustWork = TRUE), colour_by = "DriverMutations",
#' palette = c("black", "blue", "grey", "red"), discrete = TRUE)
plot_allelecount_vs_origintime <- function (file_or_dataframe, log = FALSE, colour_by = "BirthRate",
palette = NA, discrete = FALSE, print_plot = TRUE)
{
if ("data.frame" %in% class(file_or_dataframe))
df <- file_or_dataframe
else {
if (!file.exists(file_or_dataframe)) {
warning(paste0(file_or_dataframe, " not found"))
plot(0, type = "n", axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file_or_dataframe)
}
df <- as.data.frame(df)
colnames(df)[colnames(df) == "AlleleCount"] <- "Descendants"
if (discrete)
df[, colour_by] <- as.character(df[, colour_by])
direction <- 1
if (is.na(palette[1])) {
if (!discrete) {
palette <- "RdBu"
direction <- -1
}
else {
long_palette <- c("#8A7C64", "#599861", "#89C5DA",
"#DA5724", "#74D944", "#CE50CA", "#3F4921",
"#C0717C", "#CBD588", "#5F7FC7", "#673770",
"#D3D93E", "#38333E", "#508578", "#D7C1B1",
"#689030", "#AD6F3B", "#CD9BCD", "#D14285",
"#6DDE88", "#652926", "#7FDCC0", "#C84248",
"#8569D5", "#5E738F", "#D1A33D")
palette <- rep(long_palette, ceiling(length(unique(df[,
colour_by]))/length(long_palette)))
}
}
palette_named <- !min(sapply(palette, function(X) tryCatch(is.matrix(col2rgb(X)),
error = function(e) FALSE)))
df <- filter(df, Descendants > 0)
q <- ggplot(df[order(df$DriverIdentity),], aes_string("OriginTime",
"Descendants", size = "BirthRate", colour = colour_by)) +
geom_point(alpha = 1) + theme_classic()
if (!discrete) {
q <- q + scale_color_distiller(palette = palette, direction = direction)
}
else {
if (palette_named) {
q <- q + scale_color_brewer(palette = palette)
}
else {
id_list <- sort(as.character(unique(select(df, colour_by))[[1]]))
q <- q + scale_color_manual(values = palette)
}
}
if (log)
q <- q + scale_y_continuous(trans = "log10")
if(print_plot) print(q)
else return(q)
}
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar132019_Invasion_NoNormalCells")
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar132019_Invasion_NoNormalCells")
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar292019_InvasionThroughout_NoNormalCells")
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar292019_InvasionThroughout_NoNormalCells")
case_supp5 <- read_table2("~/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar292019_InvasionThroughout_NoNormalCells/output_driver_genotype_properties.dat")
case_supp5 <- read_table2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar292019_InvasionThroughout_NoNormalCells/output_driver_genotype_properties.dat")
case_supp1 <- read_table2("~/Desktop/testdata/supplementary/K1_voter_seed91_output_driver_genotype_properties.dat")
Mar29_throughout <- read_table2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar292019_InvasionThroughout_NoNormalCells/output_driver_genotype_properties.dat")
case_supp5 <- read_table2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar292019_InvasionThroughout_NoNormalCells/output_driver_genotype_properties.dat")
Mar29_throughout <- filter(Mar29_throughout, Descendants >= 1e6 / 100) %>% select(Parent, Identity, Population)
plot_tree(Mar29_throughout)
plot_figure2("/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/Testing/Mar132019_Invasion_NoNormalCells")
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 10, height = 1.5)
par(mar = c(4,4,1,1))
par(mfrow = c(1, 4))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "frequency")
dev.off()
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 6, height = 1.5)
par(mar = c(4,4,1,1))
par(mfrow = c(1, 4))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
dev.off()
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 12, height = 3)
par(mar = c(4,4,1,1))
par(mfrow = c(1, 4))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
dev.off()
pdf(paste0(output_dir, "VAFs_linear.pdf"), width = 8, height = 2)
par(mar = c(4,4,1,1))
par(mfrow = c(1, 4))
plot_counts("/Users/rnoble/Desktop/testdata/caseA_seed_3/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseB_seed_76/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseC_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
plot_counts("/Users/rnoble/Desktop/testdata/caseD_seed_10/output_allele_counts.dat", ylim = c(0, 100), xlab = "Frequency")
dev.off()
K_plot("caseC", 1)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3, ncol = 2)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3, ncol = 2)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3, ncol = 2)
pdf(paste0(output_dir, "clusters_varied_K_horizontal.pdf"), width = 8, height = 3.5)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3, ncol = 2)
dev.off()
#facet_df$migration_edge_only = factor(facet_df$migration_edge_only, levels=c(1, 0))
#facet_df$migration_type = factor(facet_df$migration_type, levels=c(2, 0))
K_plot <- function(cas, mig) {
facet_df <- filter(combined_cases, case == cas, migration_edge_only == mig)
g2 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(K), shape = as.factor(K)),
facet_df, alpha=0.25) +
# facet_grid(case ~ migration_edge_only, labeller = label_both) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1), size = 2) +
#facet_grid(rows = vars(migration_type)) +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.1, nudge_y=0.05) +
scale_color_manual(values = c("red", "gold", "blue", "magenta"), name = "gland\nsize") +
scale_shape_manual(values=0:3, name = "gland\nsize") +
theme(strip.background = element_blank(), strip.text.x = element_blank(), strip.text.y = element_blank()) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
return(g2)
}
pdf(paste0(output_dir, "clusters_varied_K_horizontal.pdf"), width = 9, height = 3.5)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3, ncol = 2)
dev.off()
pdf(paste0(output_dir, "clusters_varied_K_horizontal.pdf"), width = 8.5, height = 3.5)
g2 <- K_plot("caseC", 1)
g3 <- K_plot("caseB", 0)
grid.arrange(g2, g3, ncol = 2)
dev.off()
library(demonanalysis, lib.loc = "~/Documents/GitHub/demonanalysis")
library(demonanalysis, lib.loc = "~/Documents/GitHub")
library(devtools)
setwd("~/Documents/GitHub/demonanalysis")
build()
install()
install()
install()
library(demonanalysis, lib.loc = "/Users/rnoble/Documents/GitHub")
library(demonanalysis, lib.loc = "/Users/rnoble/Documents/GitHub/demonanalysis")
library(demonanalysis)
install.packages("devtools")
library(demonanalysis)
?count_drivers
