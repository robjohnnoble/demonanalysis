metrics(K153min),
metrics(K255min),
metrics(K448min),
metrics(K252min),
metrics(K136min),
metrics(CRUK0029min),
metrics(CRUK0062min),
metrics(CRUK0065min),
metrics(CRUK0071min),
metrics(CRUK0096min)
))
real_points$tumour <- c(rep(c("K153", "K255", "K448", "K252", "K136"), 2),
"CRUK0029", "CRUK0062", "CRUK0065", "CRUK0071", "CRUK0096")
real_points$minimal <- c(rep(0, 5), rep(1, 10))
real_points$text_y <- real_points$D * c(1,1,1,1,1,1,1,1,0.8,1,1,1,1,1,1)
real_points$text_x <- real_points$n * c(1,1,1,1,1,1,1,1,1,0.65,1,1,1,1,1)
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_line(aes(x = x1, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x2, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y2), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y3), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y4), curve_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0)) +
#geom_line(aes(x = n, y = D, group = tumour), real_points) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.01, nudge_y=0.005) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters_Sept2019.pdf"), width = 7, height = 7)
print(g1)
dev.off()
pdf(paste0(output_dir, "clusters_Sept2019.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_line(aes(x = x1, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x2, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y2), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y3), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y4), curve_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D), filter(real_points, minimal == 1)) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0)) +
#geom_line(aes(x = n, y = D, group = tumour), real_points) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
#geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.01, nudge_y=0.005) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters_Sept2019.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
real_points$dataset <- c(rep("kidney", 10), rep("lung", 5))
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_line(aes(x = x1, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x2, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y2), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y3), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y4), curve_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D, group = dataset), filter(real_points, minimal == 1), shape = 1:2) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0)) +
#geom_line(aes(x = n, y = D, group = tumour), real_points) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
#geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.01, nudge_y=0.005) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters_Sept2019.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
real_points
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_line(aes(x = x1, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x2, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y2), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y3), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y4), curve_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D, group = dataset), filter(real_points, minimal == 1, dataset == "kidney")) +
geom_point(aes(x = n, y = D, group = dataset), filter(real_points, minimal == 1, dataset == "lung"), shape = 2) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0)) +
#geom_line(aes(x = n, y = D, group = tumour), real_points) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
#geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.01, nudge_y=0.005) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters_Sept2019.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
g1 <- ggplot() +
geom_point(aes(x=Drivers+1, y=Diversity, color=as.factor(case), shape=as.factor(case)), chart_df_1, alpha=0.5) +
scale_y_log10(limits = c(1, 40), name = "Diversity of driver mutations") +
#scale_x_continuous(limits = c(0, 13), trans = "sqrt", breaks = c(0.1, 1, 5, 10)) +
scale_x_log10(limits = c(1, 14), name = "Mean driver mutations per cell") +
theme_classic() +
# geom_line(aes(x = x, y = y1), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y2), line_df, lty = 2, color = "grey") +
# geom_line(aes(x = x, y = y3), line_df, lty = 2, color = "grey") +
geom_line(aes(x = x1, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x2, y = y), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y2), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y3), curve_df, lty = 2, color = "grey") +
geom_line(aes(x = x3, y = y4), curve_df, lty = 2, color = "grey") +
geom_point(aes(x = n, y = D, group = dataset), filter(real_points, minimal == 1, dataset == "kidney")) +
geom_point(aes(x = n, y = D, group = dataset), filter(real_points, minimal == 1, dataset == "lung"), shape = 15) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0)) +
#geom_line(aes(x = n, y = D, group = tumour), real_points) +
#geom_point(aes(x = n, y = D), filter(real_points, minimal == 0), color = "grey") +
#geom_text(aes(x = text_x, y = text_y, label = tumour), filter(real_points, minimal == 1), nudge_x=0.01, nudge_y=0.005) +
scale_color_manual(values = c("red", "yellow4", "dodgerblue", "chocolate", "cyan"), name = "deme\ncarrying\ncapacity") +
scale_shape_manual(values=0:4) +
theme(legend.position="none")
pdf(paste0(output_dir, "clusters_Sept2019.pdf"), width = 3.5, height = 3.5)
print(g1)
dev.off()
worked_hours <- function(num_days) {
repeat{
hours <- 8 + floor(runif(num_days) * 3) * 0.25
if(mean(hours) > 8.2) break
}
return(list(hours, mean(hours)))
}
worked_hours(16)
worked_hours(12)
worked_hours(4)
worked_hours(16)
worked_hours(13)
library(matlib)
install.packages("matlib")
library(matlib)
A <- matrix(c(1, -2, -4, 8), 2, 2) b <- c(0, 0)
A <- matrix(c(1, -2, -4, 8), 2, 2)
b <- c(0, 0)
showEqn(A, b)
par(mar = c(4, 4, 0.5, 0.5))
par(mgp = c(2.5, 1, 0))
par(cex.lab = 1.25)
plotEqn(A, b)
A <- matrix(c(1, -2, -4, 1), 2, 2)
b <- c(0, 0)
showEqn(A, b)
plotEqn(A, b)
solve(A, b)
A <- matrix(c(1, -2, -4, 8), 2, 2)
b <- c(2, 2)
showEqn(A, b)
plotEqn(A, b)
A <- matrix(c(1, -2, -4, 1), 2, 2)
b <- c(2, 2)
showEqn(A, b)
plotEqn(A, b)
solve(A, b)
parms <- c(f0 = 1, f1 = 1.5, q_00 = 0.6, q_01 = 0.4, q_10 = 0.2, q_11 = 0.8)
times <- c(0:200)/25
initconds <- c(a = 0.75, b = 0.25)
M = matrix(c(parms["f0"] * parms["q_00"], parms["f0"] * parms["q_01"],
parms["f1"] * parms["q_10"], parms["f1"] * parms["q_11"]),
2, 2)
eig = eigen(M)
eig$values
x_star = eig$vectors[, 1]/sum(eig$vectors[, 1])
x_star
# phi corresponds to largest eigenvalue
sum(x_star * c(parms["f0"], parms["f1"]))
# Solve IVP
ivp = solve(eig$vectors, initconds)
Xa = ivp[1] * eig$vectors[1, 1] * exp(eig$values[1] * times) +
ivp[2] * eig$vectors[1, 2] * exp(eig$values[2] * times)
Xb = ivp[1] * eig$vectors[2, 1] * exp(eig$values[1] * times) +
ivp[2] * eig$vectors[2, 2] * exp(eig$values[2] * times) plot(times, Xa, xlab = "time", ylab = expression(X), main = "",
col = "dodgerblue", type = "l", lwd = 2)
Xb = ivp[1] * eig$vectors[2, 1] * exp(eig$values[1] * times) +
ivp[2] * eig$vectors[2, 2] * exp(eig$values[2] * times)
plot(times, Xa, xlab = "time", ylab = expression(X), main = "",
col = "dodgerblue", type = "l", lwd = 2)
lines(times, Xb, col = "#ff8c00", lwd = 2)
plot(times, Xa/(Xa + Xb), ylim = c(0, 1), xlab = "time", ylab = expression(X),
main = "", col = "dodgerblue", type = "l", lwd = 2)
lines(times, Xb/(Xa + Xb), col = "#ff8c00", lwd = 2)
library(deSolve)
my.atol <- c(1e-06)
sdiffeqns <- function(t, x, p) {
dxa <- x[1] * p["f0"] * p["q_00"] + x[2] * p["f1"] * p["q_10"] -
(x[1] * p["f0"] + x[2] * p["f1"]) * x[1]
dxb <- x[1] * p["f0"] * p["q_01"] + x[2] * p["f1"] * p["q_11"] -
(x[1] * p["f0"] + x[2] * p["f1"]) * x[2] list(c(dxa, dxb))
}
sdiffeqns <- function(t, x, p) {
dxa <- x[1] * p["f0"] * p["q_00"] + x[2] * p["f1"] * p["q_10"] -
(x[1] * p["f0"] + x[2] * p["f1"]) * x[1]
dxb <- x[1] * p["f0"] * p["q_01"] + x[2] * p["f1"] * p["q_11"] -
(x[1] * p["f0"] + x[2] * p["f1"]) * x[2]
list(c(dxa, dxb))
}
out <- lsoda(initconds, times, sdiffeqns, parms, rtol = 1e-10, atol = my.atol)
plot(out[, 1], out[, 2], xlab = "time", ylab = "x", main = "", col = "dodgerblue",
lwd = 2, ylim = c(0, 1), xlim = c(0, 8), type = "l")
lines(out[, 1], out[, 3], col = "#ff8c00", lwd = 2)
A <- matrix(c(1, -2, -4, 8), 2, 2)
b <- c(0, 0)
showEqn(A, b)
par(mar = c(4, 4, 0.5, 0.5))
par(mgp = c(2.5, 1, 0))
par(cex.lab = 1.25)
plotEqn(A, b)
A <- matrix(c(1, -2, -4, 1), 2, 2)
b <- c(0, 0)
showEqn(A, b)
plotEqn(A, b)
solve(A, b)
A <- matrix(c(1, -2, -4, 8), 2, 2)
b <- c(2, 2)
showEqn(A, b)
plotEqn(A, b)
A <- matrix(c(1, -2, -4, 1), 2, 2)
b <- c(2, 2)
showEqn(A, b)
plotEqn(A, b)
solve(A, b)
x_star
eig$vectors[, 1]
eig$vectors
eig$values
sum(x_star * c(parms["f0"], parms["f1"]))
solve(eig$vectors, initconds)
eig$vectors
plot(times, Xa, xlab = "time", ylab = expression(X), main = "",
col = "dodgerblue", type = "l", lwd = 2)
lines(times, Xb, col = "#ff8c00", lwd = 2)
plot(times, Xa/(Xa + Xb), ylim = c(0, 1), xlab = "time", ylab = expression(X),
main = "", col = "dodgerblue", type = "l", lwd = 2)
lines(times, Xb/(Xa + Xb), col = "#ff8c00", lwd = 2)
tail((Xa)/(Xa + Xb))
head(out)
plot(out[, 1], out[, 2], xlab = "time", ylab = "x", main = "", col = "dodgerblue",
lwd = 2, ylim = c(0, 1), xlim = c(0, 8), type = "l")
lines(out[, 1], out[, 3], col = "#ff8c00", lwd = 2)
p
x_star
c(parms["f0"], parms["f1"])
# phi corresponds to largest eigenvalue:
sum(x_star * c(parms["f0"], parms["f1"]))
solve(eig$vectors, initconds)
x_star
plot(times, Xa, xlab = "time", ylab = expression(X), main = "",
col = "dodgerblue", type = "l", lwd = 2, log = "y")
lines(times, Xb, col = "#ff8c00", lwd = 2)
eig$values
library(matlib)
A <- matrix(c(1, -2, -4, 8), 2, 2)
A
b <- c(0, 0)
showEqn(A, b)
par(mar = c(4, 4, 0.5, 0.5))
par(mgp = c(2.5, 1, 0))
par(cex.lab = 1.25)
plotEqn(A, b)
A <- matrix(c(1, -2, -4, 1), 2, 2)
A
b <- c(0, 0)
showEqn(A, b)
plotEqn(A, b)
solve(A, b)
A <- matrix(c(1, -2, -4, 8), 2, 2)
A
A <- matrix(c(1, -2, -4, 8), 2, 2)
b <- c(2, 2)
showEqn(A, b)
plotEqn(A, b)
A <- matrix(c(1, -2, -4, 1), 2, 2)
A
b <- c(2, 2)
showEqn(A, b)
plotEqn(A, b)
solve(A, b)
parms <- c(f0 = 1, f1 = 1.5,
q_00 = 0.6, q_01 = 0.4,
q_10 = 0.2, q_11 = 0.8)
times <- c(0:200)/25
initconds <- c(a = 0.75, b = 0.25)
M = matrix(c(parms["f0"] * parms["q_00"], parms["f0"] * parms["q_01"],
parms["f1"] * parms["q_10"], parms["f1"] * parms["q_11"]),
2, 2)
eig = eigen(M)
eig
eig$values
x_star = eig$vectors[, 1]/sum(eig$vectors[, 1])
x_star # normalised leading eigenvector
# phi corresponds to largest eigenvalue:
sum(x_star * c(parms["f0"], parms["f1"]))
# Solve IVP:
ivp = solve(eig$vectors, initconds)
Xa = ivp[1] * eig$vectors[1, 1] * exp(eig$values[1] * times) +
ivp[2] * eig$vectors[1, 2] * exp(eig$values[2] * times)
Xb = ivp[1] * eig$vectors[2, 1] * exp(eig$values[1] * times) +
ivp[2] * eig$vectors[2, 2] * exp(eig$values[2] * times)
plot(times, Xa, xlab = "time", ylab = expression(X), main = "",
col = "dodgerblue", type = "l", lwd = 2)
lines(times, Xb, col = "#ff8c00", lwd = 2)
plot(times, Xa, xlab = "time", ylab = expression(X), main = "",
col = "dodgerblue", type = "l", lwd = 2, log = "y")
lines(times, Xb, col = "#ff8c00", lwd = 2)
plot(times, Xa/(Xa + Xb), ylim = c(0, 1), xlab = "time", ylab = expression(X),
main = "", col = "dodgerblue", type = "l", lwd = 2)
lines(times, Xb/(Xa + Xb), col = "#ff8c00", lwd = 2)
my.atol <- c(1e-06)
sdiffeqns <- function(t, x, p) {
dxa <- x[1] * p["f0"] * p["q_00"] + x[2] * p["f1"] * p["q_10"] -
(x[1] * p["f0"] + x[2] * p["f1"]) * x[1]
dxb <- x[1] * p["f0"] * p["q_01"] + x[2] * p["f1"] * p["q_11"] -
(x[1] * p["f0"] + x[2] * p["f1"]) * x[2]
list(c(dxa, dxb))
}
out <- lsoda(initconds, times, sdiffeqns, parms, rtol = 1e-10, atol = my.atol)
plot(out[, 1], out[, 2], xlab = "time", ylab = "x", main = "", col = "dodgerblue",
lwd = 2, ylim = c(0, 1), xlim = c(0, 8), type = "l")
lines(out[, 1], out[, 3], col = "#ff8c00", lwd = 2)
edges1 <- data.frame(Parent = c(0,1,1,2,2,3,3), Identity = 1:7, Population = c(2,10,5,10,20,10,3))
plot_tree(edges1)
library(demonanalysis)
plot_tree(edges1)
library(graph)
plot_tree(edges1)
edges <- edges1
elist <- select(edges, Parent, Identity)
library(dplyr)
elist <- select(edges, Parent, Identity)
elist <- filter(elist, Parent != Identity)
elist <- as.data.frame(elist)
M2 <- ftM2adjM(cbind(elist$Parent, elist$Identity), edgemode = "undirected")
gg <- as(M2, "graphNEL")
if(!"Population" %in% colnames(edges)) edges$Population <- 1
edges$Population <- edges$Population / sum(edges$Population)
node_sizes <- 10*(edges$Population)
names(node_sizes) <- edges$Identity
nAttrs <- list()
attrs <- list()
nAttrs$width <- node_sizes
nAttrs$fillcolor <- c("0" = "red")
nAttrs$fontcolor <- c("0" = "red")
attrs$node$fixedsize <- FALSE
if(fill == "black") attrs$node$fontsize <- 0
attrs$node$fillcolor <- fill
attrs$node$fontsize <- 0
attrs$node$fillcolor <- "black"
attrs$node$fontcolor <- "black"
attrs$edge$arrowsize <- 0
plot(gg, nodeAttrs = nAttrs, attrs = attrs)
plot_tree(edges1)
c("0" = "red")
edges1
#'
#' @export
#' @import Rgraphviz
#' @import dplyr
#' @importFrom grDevices dev.off
#' @importFrom grDevices pdf
#'
#' @examples
#' edges1 <- data.frame(Parent = c(0,1,1,2,2,3,3), Identity = 1:7, Population = c(2,10,5,10,20,10,3))
#' plot_tree(edges1)
plot_tree <- function(edges, output_dir = NA, output_filename = NA, fill = "black", display = TRUE) {
elist <- select(edges, Parent, Identity)
elist <- filter(elist, Parent != Identity)
elist <- as.data.frame(elist)
M2 <- ftM2adjM(cbind(elist$Parent, elist$Identity), edgemode = "undirected")
gg <- as(M2, "graphNEL")
if(!"Population" %in% colnames(edges)) edges$Population <- 1
edges$Population <- edges$Population / sum(edges$Population)
node_sizes <- 10*(edges$Population)
names(node_sizes) <- edges$Identity
nAttrs <- list()
attrs <- list()
nAttrs$width <- node_sizes
nAttrs$fillcolor <- c("0" = "red")
nAttrs$fontcolor <- c("0" = "red")
attrs$node$fixedsize <- FALSE
if(fill == "black") attrs$node$fontsize <- 0
attrs$node$fillcolor <- fill
attrs$node$fontcolor <- "black"
attrs$edge$arrowsize <- 0
if(!is.na(output_dir)) pdf(paste0(output_dir, output_filename, ".pdf"), width = 5, height = 5)
if(display) {
plot.new()
plot(gg, nodeAttrs = nAttrs, attrs = attrs)
}
if(!is.na(output_dir)) dev.off()
}
plot_tree(edges1)
library(devtools)
setwd("/Users/rnoble/Documents/GitHub/demonanalysis"")
setwd("/Users/rnoble/Documents/GitHub/demonanalysis")
build()
build()
install()
library(demonanalysis)
plot_tree
edges1 <- data.frame(Parent = c(0,1,1,2,2,3,3), Identity = 1:7, Population = c(2,10,5,10,20,10,3))
plot_tree(edges1)
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
build()
install()
library(demonanalysis)
plot_tree(edges1)
plot_tree(edges1, fill = "yellow")
plot_tree(edges1, fill = "black")
build()
library(demonanalysis)
install()
library(demonanalysis)
plot_tree(edges1, fill = "yellow")
plot_tree(edges1, fill = "black")
caseA <- read_table2("~/Desktop/testdata/caseA_seed_3/output_driver_genotype_properties.dat")
library(readr)
caseA <- read_table2("~/Desktop/testdata/caseA_seed_3/output_driver_genotype_properties.dat")
edgesA <- filter(caseA, Descendants >= 1e6 / 100) %>% select(Parent, Identity, Population)
plot_tree(edgesA, output_dir, "Trees/caseA") # preprint fig 2
plot_tree(edgesA) # preprint fig 2
plot.new()
plot_tree(edgesA) # preprint fig 2
combined_cases <- read.csv("~/Desktop/testdata/combined_cases3.csv", sep="")
?plot_tree
getwd()
document()
build()
install()
library(demonanalysis)
?plot_tree
?plot_tree
?plot_tree
detach("package:demonanalysis", unload=TRUE)
library(demonanalysis)
?plot_tree
.rs.restartR()
?plot_tree
R --version
R.Version()
