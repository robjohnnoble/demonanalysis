part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum <- sum(K/(l*(K-l))*part1/24 + K*delta/(l*(K-l))*part2/6)
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1(1, 1.01, 5)
time_fixation_sum1_approx(1, 1.01, 5)
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum <- sum((K*part1/24 + K*delta*part2/6) *delta^3/(l*(K-l)) )
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx(1, 1.01, 5)
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum <- sum((K*part1/24 + K*delta*part2/6) * delta^3/(l*(K-l)))
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx(1, 1.01, 5)
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum <- sum((K*part1/24 + K*delta*part2/6) * delta^3/(l*(K-l)))
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
return(X + sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum <- sum((K*part1/24 + delta*l*part2/6) * delta^3/(l*(K-l)))
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
return(X + sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum <- sum((K*part1/24 * delta^4 + delta*l*part2/6 * delta^3) / (l*(K-l)))
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
return(X + sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx(1, 1.01, 5)
time_fixation_sum1(1, 1.01, 5)
r2 <- 1.01
r1 <- 1
K <- 5
delta <- r2 - 1
r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
part1
part2
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum1 <- sum(K*part1/24 * delta^4 / (l*(K-l)))
sum2 <- sum(delta*l*part2/6 * delta^3 / (l*(K-l)))
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
return(X + sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx2 <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum1 <- sum(K*part1/24 * delta^4 / (l*(K-l)))
sum2 <- sum(delta*l*part2/6 * delta^3 / (l*(K-l)))
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
return(X + (sum1 + sum2)/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
part1 <- -l*(l+1)*(l+2)*(l+3) - (K-l)*(K-l+1)*(K-l+2)*(K-l+3) + K*(K+1)*(K+2)*(K+3)
part2 <- l*(l+1)*(l+2) + (K-l)*(K-l+1)*(K-l+2) - K*(K+1)*(K+2)
sum1 <- sum(K*part1/24 * delta^4 / (l*(K-l)))
sum2 <- sum(delta*l*part2/6 * delta^3 / (l*(K-l)))
sum1
sum2
X <- K*(K-1)*delta^2*(1-delta*(K+1)/2)
X
sum(delta^4/2*(K+2)*l)
delta^4*K*(K-1)/12*((11+9*K+2*K^2+K^2-K))
delta^4*K/12*sum(11+9*K+2*K^2+l^2-K*l)
delta^4*K*(K-1)/12*((11+9*K+2*K^2+K^2-K/2-K^2/2))
delta^4*K*(K-1)/12*((11+9*K+2*K^2+K^2/3-K/6-K^2/2))
11/6
2+1/3-1/2
time_fixation_sum1_approx <- function(r1, r2, K, r_powers_shifted = NA) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
sum <- K*(K-1)*delta^2 * (1 - delta*(K+1)/2 + delta^2/12*(11/6*K^2+35/6*K+5))
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation_sum1_approx2(1, 1.01, 5)
time_fixation_sum1_approx(1, 1.01, 5)
plot(sqrt(sapply(s_list, time_fixation_sum1, r1=1, K = 5)) ~ s_list, col = "red")
plot(sapply(s_list, time_fixation_sum1, r1=1, K = 5) ~ s_list, col = "red")
lines(sapply(s_list, approx_sum1_approx, K = 5) ~ s_list, col = "orange")
lines(sapply(s_list, time_fixation_sum1_approx, K = 5) ~ s_list, col = "orange")
lines(sapply(s_list, time_fixation_sum1_approx, r1=1, K = 5) ~ s_list, col = "orange")
lines(sapply(s_list, approx_sum1, K = 5) ~ s_list, col = "orange")
plot(sapply(s_list, time_fixation_sum1, r1=1, K = 5) ~ s_list, col = "red")
lines(sapply(s_list, time_fixation_sum1_approx, r1=1, K = 5) ~ s_list, col = "orange")
lines(sapply(s_list, time_fixation_sum1_approx, r1=1, K = 5) ~ s_list)
lines(sapply(s_list, approx_linear, K = 5) ~ s_list, col = "orange")
lines(sapply(s_list, approx_sum1_linear, K = 5) ~ s_list, col = "orange")
lines(sapply(s_list, approx_sum1_basic, K = 5) ~ s_list, col = "green3")
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 4)
#' time_fixation(1, 1.001, 4, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
delta <- r2 - 1
if(approx) sum <- K*(K-1)*delta^2 * (1 - delta*(K+1)/2 + delta^2/12*(11/6*K^2+35/6*K+5))
else sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 4)
time_fixation(1, 1.001, 4, approx = TRUE)
rm(time_fixation)
check()
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 4)
#' time_fixation(1, 1.001, 4, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
delta <- r2 - 1
if(approx) sum <- K*(K-1)*delta^2 * (1 - delta*(K+1)/2 + delta^2/72*(11*K^2+35*K+30))
else sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 4, approx = TRUE)
rm(time_fixation)
time_fixation(1, 1.01, 4)
time_fixation(1, 1.01, 4,approx = TRUE)
time_fixation(1, 1.1, 4)
time_fixation(1, 1.1, 4,approx = TRUE)
time_fixation(1, 1.01, 32)
time_fixation(1, 1.01, 32, approx = TRUE)
time_fixation(1, 1.001, 32)
time_fixation(1, 1.001, 32, approx = TRUE)
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 32)
#' time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
delta <- r2 - 1
if(approx) sum <- K*(K-1)*delta^2 * (1 - delta*(K+1)/2 + delta^2/72*(11*K-15)*(K-2))
else sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 32, approx = TRUE)
(11*K-15)*(K-2)
11*K^2+35*K+30
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 32)
#' time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
delta <- r2 - 1
if(approx) sum <- K*(K-1)*delta^2 * (1 - delta*(K+1)/2 + delta^2/72*(11*K^2-37*K+30))
else sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation(1, 1.001, 32)
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 32)
#' time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
delta <- r2 - 1
if(approx) sum <- K*(K-1)*delta^2 * (1 - delta*(K+1)/2 + delta^2/72*(11*K^2+35*K+30))
else sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 32)
time_fixation(1, 1.001, 32)
time_fixation(1, 1.001, 32, approx = TRUE)
1/72 * (11*1:5 - 15) * (1:5 - 2)
1/6 * (1:5 - 1) * (1:5 - 2)
#' @param K deme carrying capacity
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equations 1.38 and 1.39.
#'
#' @examples
#' T_grow_j(3, 1, 1.1, 4)
T_grow_j <- function(j, r1, r2, K, approx = FALSE) {
if(j > K) return(Inf)
if(j <= 1 || K <= 1) return(0)
if(j == K) return(time_fixation(r1, r2, K))
if(approx) {
delta <- r2 - 1
X <- 1 + (K-1)*delta
return((K-1)/r1 * (X + 1/72 * (11*K - 15) * (K - 2) * delta^2) / (X + 1/6 * (K - 1) * (K - 2) * delta^2))
}
r_powers_shifted <- r2^(0:K) # need to add one to the index!
t1 <- time_fixation(r1, r2, K, r_powers_shifted)
if(r2 == 1) sum1 <- K / j - 1
else {
sum1 <- (r2^(1-j) - r2^(1-K)) / (r2 - 1) # sum of 1/r2^k from k=j to k=K-1
sum1 <- sum1 * (1 - 1/r2) / (1 - 1/r2^j) # ratio rho(1)/rho(j)
}
l <- 1:(K-1)
if(r2 == 1) sum2 <- K / j * sum((K - pmax(j, l)) / (K - l))
else {
sum2 <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 / r_powers_shifted[pmax(j, l) - l + 1] - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^j > 1e20) {
sum2 <- sum2 / (r2 - 1)
} else {
sum2 <- sum2 * r2^j / ((r2^j - 1) * (r2 - 1))
}
}
return((t1 * (1 + sum1) - sum2 / r1)) # relative to the doubling time of a cell with birth rate 1
}
T_grow_j(3, 1, 1.001, 32)
T_grow_j(3, 1, 1.001, 32, approx = TRUE)
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 32)
#' time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
delta <- r2 - 1
if(approx) {
X <- 1 + (K-1)*delta
return((K-1)/r1 * (X + 1/72 * (11*K - 15) * (K - 2) * delta^2) / (X + 1/6 * (K - 1) * (K - 2) * delta^2))
}
sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 32)
time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation(1, 1.01, 32)
time_fixation(1, 1.01, 32, approx = TRUE)
rm(lsf.str())
lsf.str()
rm(as.char(lsf.str()))
rm(lsf.str(all.names=TRUE))
rm(list = lsf.str(all.names=TRUE))
(11*1:5-15)/(12*1:5-1)
time_fixation(1, 1.01, 5)
time_fixation(1, 1.01, 5, approx = TRUE)
time_fixation(1, 1.001, 5)
time_fixation(1, 1.001, 5, approx = TRUE)
time_fixation(1, 1.005, 5)
time_fixation(1, 1.005, 5, approx = TRUE)
time_fixation(1, 1.001, 512)
time_fixation(1, 1.001, 512, approx = TRUE)
time_fixation(1, 1, 512)
time_fixation(1, 1.0001, 512)
time_fixation(1, 1.0001, 512, approx = TRUE)
time_fixation(1, 1.01, 3)
time_fixation(1, 1.01, 3, approx = TRUE)
r2
r2 <- 1.001
(r2^K-1)^-1
1/(0.001*(K+K*(K-1)/2*0.001))
1/(0.001*(K+K*(K-1)/2*0.001+K*(K-1)*(K-2)/6*0.001^2))
1/(K*0.001)*(1-(K-1)/2*0.001+((K-1)^2/4-(K-1)*(K-2)/5)*0.001^2)
1/(K*0.001)*(1-(K-1)/2*0.001)
(K-1)^2/4-(K-1)*(K-2)/5)
(K-1)^2/4-(K-1)*(K-2)/5
(K-1)^2/4-(K-1)*(K-2)/(5*K)
r2^K/((r2^K-1)*(r2-1))
1/(K*0.001^2)*(1 + (K+1)/2*0.001 + (K-1)/12*(4*K+1)*0.001^2)
1/(K*0.001^2)*(1 + (K-(K-1)/2)*0.001 + (K*(K-1)/2 + ((K-1)/2)^2 - (K-1)*(K-2)/6 -K*(K-1)/2)*0.001^2)
1/(K*0.001^2)*(1 + (K+1)/2*0.001 + (K-1)/12*(K+1)*0.001^2)
(K-1) * (1 + 1/72 * (-K^2-K+6)*0.001^2)
(K-1) * (1 + 1/72 * (-K^2-K+6)*0.01^2)
time_fixation(1, 1.001, 32)
K<-32
r2
(K-1) * (1 + 1/72 * (-K^2-K+6)*0.01^2)
(K-1) * (1 + 1/72 * (-K^2-K+6)*0.001^2)
time_fixation(1, 1.001, 32, approx = TRUE)
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 32)
#' time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(approx) return((K-1) * (1 + 1/72 * (-K^2-K+6)*0.001^2))
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation(1, 1.01, 32, approx = TRUE)
#'
#' @return The waiting time.
#'
#' @export
#'
#' @details See Traulsen 2009, equation 1.38.
#'
#' @examples
#' time_fixation(1, 1.001, 32)
#' time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation <- function(r1, r2, K, r_powers_shifted = NA, approx = FALSE) {
if(K == 1) return(0)
if(r2 == 1) return(K - 1)
delta <- r2 - 1
if(approx) return((K-1) * (1 + 1/72 * (-K^2-K+6)*delta^2))
if(is.na(r_powers_shifted[1])) r_powers_shifted <- r2^(0:K)
l <- 1:(K-1)
sum <- sum((1 - 1 / r_powers_shifted[l + 1]) * (r2 * l + K - l) * (1 - 1 / r_powers_shifted[K - l + 1]) / (l * (K - l)))
if(r2^K > 1e20) {
sum <- sum * 1 / delta
} else {
sum <- sum * r2^K / ((r2^K - 1) * delta)
}
return(sum/r1) # relative to the doubling time of a cell with birth rate 1
}
time_fixation(1, 1.01, 32, approx = TRUE)
time_fixation(1, 1.01, 32)
time_fixation(1, 1.001, 32, approx = TRUE)
time_fixation(1, 1.001, 32)
check()
disp_rate_demon(32, 1/0.9)
disp_rate_demon(32, 1.1*1/0.9) / disp_rate_demon(32, 1/0.9)
disp_rate_demon(512, 1.1*1/0.9) / disp_rate_demon(512, 1/0.9)
disp_rate_demon(8192, 1.1*1/0.9) / disp_rate_demon(8192, 1/0.9)
worked_hours <- function(num_days) {
repeat{
hours <- 8 + floor(runif(num_days) * 3) * 0.25
if(mean(hours) > 8.2) break
}
return(list(hours, mean(hours)))
}
worked_hours(18)
worked_hours(18)
worked_hours(10)
library(readr)
ImageDataFeb2019 <- read_csv("~/Documents/MontpellierDocuments/Data/Jakob/ImageDataFeb2019.xlsx")
View(ImageDataFeb2019)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readr)
ImageDataFeb2019 <- read_delim("~/Documents/MontpellierDocuments/Data/Jakob/ImageDataFeb2019.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(ImageDataFeb2019)
mean(ImageDataFeb2019$NumCells)
stdev(ImageDataFeb2019$NumCells)
sd(ImageDataFeb2019$NumCells)
hist(ImageDataFeb2019$NumCells)
hist(ImageDataFeb2019$NumCells, breaks = 20)
hist(ImageDataFeb2019$NumCells, breaks = 50)
hist(ImageDataFeb2019$NumCells, breaks = 100)
library(dplyr)
length(filter(ImageDataFeb2019, NumCells < 300, NumCell > 50)$NumCells)
length(filter(ImageDataFeb2019, NumCells < 300, NumCells > 50)$NumCells)
length(filter(ImageDataFeb2019, NumCells < 500, NumCells > 50)$NumCells)
length(filter(ImageDataFeb2019, NumCells < 500, NumCells > 50)$NumCells) / 41
length(filter(ImageDataFeb2019, NumCells <= 500, NumCells >= 50)$NumCells) / 41
2^13
library(demonanalysis)
?all_output
?combine_dfs
