#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
mutate(GrowthRate = pmax((NumCells - lag(NumCells, 2)) / (Generation - lag(Generation, 2)), 1e-6)) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 2)), "GrowthRate"]
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
ungroup()
return(df)
}
add_columns(df, 2)
#' NumCells, relative to Generation; SmoothGrowthRate is GrowthRate with loess smoothing.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 5)), "GrowthRate"]
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
ungroup()
return(df)
}
add_columns(df, 2)
#' NumCells, relative to Generation; SmoothGrowthRate is GrowthRate with loess smoothing.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
#mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
# replace NA values in GrowthRate:
#df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 5)), "GrowthRate"]
df <- df %>% group_by_at(1:num_parameters) %>%
#mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation))$fitted) %>%
mutate(GrowthRate = pmax((SmoothNumCells - lag(SmoothNumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
return(df)
}
add_columns(df, 2)
#' NumCells, relative to Generation; SmoothGrowthRate is GrowthRate with loess smoothing.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
#mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
#mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation))$fitted) %>%
mutate(GrowthRate = pmax((SmoothNumCells - lag(SmoothNumCells, 2)) / (Generation - lag(Generation, 2)), 1e-6)) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 2)), "GrowthRate"]
return(df)
}
add_columns(df, 2)
#' NumCells, relative to Generation; SmoothGrowthRate is GrowthRate with loess smoothing.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
#mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
#mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation))$fitted) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 2)) / (Generation - lag(Generation, 2))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 2)), "GrowthRate"]
return(df)
}
add_columns(df, 2)
data_small <- add_columns(data_small, num_parameters = num_parameters)
df <- data_small
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
#mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
#mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation))$fitted) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 2)) / (Generation - lag(Generation, 2))) %>%
ungroup()
min(data$NumCells, na.rm = TRUE)
min(data$Generation, na.rm = TRUE)
#' NumCells, relative to Generation; SmoothGrowthRate is GrowthRate with loess smoothing.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
#mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
#mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1))$fitted) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 2)) / (Generation - lag(Generation, 2))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 2)), "GrowthRate"]
return(df)
}
data_small <- add_columns(data_small, num_parameters = num_parameters)
data_small <- add_relative_time(data_small, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data_small, num_parameters, x_var = "NumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "SMALLDATA_growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
colnames(data_small)
plot_curves_faceted(data_small, num_parameters, x_var = "Generation", y_var = "SmoothGrowthRate",
log = "y",
output_filename = "SMALLDATA_curves_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
plot_curves_faceted(data_small, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
log = "y",
output_filename = "SMALLDATA_curves_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
#' NumCells, relative to Generation; SmoothGrowthRate is GrowthRate with loess smoothing.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
#mutate(GrowthRate = pmax((NumCells - lag(NumCells, 5)) / (Generation - lag(Generation, 5)), 1e-6)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
#mutate(SmoothGrowthRate = 10^loess(log10(GrowthRate) ~ NumCells)$fitted) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 1)$fitted) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 2)) / (Generation - lag(Generation, 2))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 2)), "GrowthRate"]
return(df)
}
data_small <- add_columns(data_small, num_parameters = num_parameters)
data_small <- add_relative_time(data_small, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data_small, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
log = "y",
output_filename = "SMALLDATA_curves_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
plot_curves_faceted(data_small, num_parameters, x_var = "NumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "SMALLDATA_growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
add_columns
add_columns(df, 2)
df <- data.frame(p = 1, seed = rep(1:2, each = 10),
Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
add_columns(df, 2)
plot_curves_faceted(data_small, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "SMALLDATA_growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
data_small$GrowthRatePerCell = data_small$GrowthRate / data_small$SmoothNumCells
plot_curves_faceted(data_small, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRatePerCell",
log = "xy", xlimits = c(1, 1E6),
output_filename = "SMALLDATA_growth_rates_per_cell_log",
output_dir = plot_dir, line_col = "rank_SmoothGrowthRate0", alpha = 0.5)
check()
df <- data.frame(p = 1, seed = rep(1:2, each = 10),
Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
add_columns(df, 2)
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:2) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:2) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 1)$fitted) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
df
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lead(df$GrowthRate, 1)), "GrowthRate"]
df
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 1)$fitted) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
df <- data.frame(p = 1, seed = rep(1:2, each = 10),
Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
add_columns(df, 2)
check()
check()
data <- read_csv(paste0(data_dir, "/data.csv"), guess_max = 1E4)
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "smooth_growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "SmoothNumCells", y_var = "Generation",
output_filename = "smooth_numcells",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
output_filename = "smooth_numcells",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
add_columns(df, 2)
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 1)$fitted) %>%
ungroup()
df[df$NumCells == max(df$NumCells), "SmoothNumCells"] <- df[df$NumCells == max(df$NumCells), "NumCells"]
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
add_columns(df, 2)
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 1)$fitted) %>%
mutate(SmoothNumCells = replace(SmoothNumCells, NumCells == max(NumCells), NumCells)) %>%
ungroup()
#df[df$NumCells == max(df$NumCells), "SmoothNumCells"] <- df[df$NumCells == max(df$NumCells), "NumCells"]
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
add_columns(df, 2)
?replace
?ifelse
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 1)$fitted) %>%
mutate(SmoothNumCells = ifelse(NumCells == max(NumCells), NumCells, SmoothNumCells)) %>%
ungroup()
#df[df$NumCells == max(df$NumCells), "SmoothNumCells"] <- df[df$NumCells == max(df$NumCells), "NumCells"]
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
add_columns(df, 2)
rm(add_columns)
check()
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
output_filename = "smooth_numcells",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
?loess
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 0.75)$fitted) %>%
mutate(SmoothNumCells = ifelse(NumCells == max(NumCells) && SmoothNumCells < NumCells, NumCells, SmoothNumCells)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
output_filename = "smooth_numcells",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
add_columns(df, 2)
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 0.75)$fitted) %>%
mutate(SmoothNumCells = ifelse(NumCells == max(NumCells) & SmoothNumCells < NumCells, NumCells, SmoothNumCells)) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
add_columns(df, 2)
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
output_filename = "smooth_numcells",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
output_filename = "log_smooth_numcells", log = "xy",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "Generation", y_var = "SmoothNumCells",
output_filename = "log_smooth_numcells", log = "y",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
#' GrowthRate is the rate of change of SmoothNumCells, relative to Generation.
#'
#' @importFrom stats loess
#'
#' @export
#'
#' @examples
#' df <- data.frame(p = 1, seed = rep(1:2, each = 10),
#' Generation = c(1:10, 3:12), NumCells = rep(1:10, times = 2) + rnorm(20, 0, 0.1))
#' add_columns(df, 2)
add_columns <- function(df, num_parameters) {
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(maxgen = max(Generation, na.rm = TRUE)) %>%
mutate(gen_adj = Generation / maxgen) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(SmoothNumCells = 10^loess(log10(NumCells) ~ log10(Generation + 1), span = 0.75)$fitted) %>%
ungroup()
df <- df %>% group_by_at(1:num_parameters) %>%
mutate(GrowthRate = (SmoothNumCells - lag(SmoothNumCells, 1)) / (Generation - lag(Generation, 1))) %>%
ungroup()
# replace NA values in GrowthRate:
df[is.na(df$GrowthRate), "GrowthRate"] <- df[!is.na(df$GrowthRate) & is.na(lag(df$GrowthRate, 1)), "GrowthRate"]
return(df)
}
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
plot_curves_faceted(data, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRate",
log = "xy", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
plot_curves_faceted(data, num_parameters, x_var = "SmoothNumCells", y_var = "GrowthRate",
log = "y", xlimits = c(1, 1E6), ylimits = c(1, 1E5),
output_filename = "growth_rates_numcells_log",
output_dir = plot_dir, line_col = "rank_GrowthRate0", alpha = 0.5)
data <- read_csv(paste0(data_dir, "/data.csv"), guess_max = 1E4)
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
data_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerData/July9thBigKNeutral"
plot_dir <- "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/July9thBigKNeutral"
num_parameters <- 18
min_count <- 20
seed_index <- which(colnames(data) == "seed")
pars_without_seed <- (1:num_parameters)[which((1:num_parameters) != seed_index)]
data <- read_csv(paste0(data_dir, "/data.csv"), guess_max = 1E4)
data <- add_columns(data, num_parameters = num_parameters)
data <- add_relative_time(data, start_size = 50000, num_parameters = num_parameters)
data %>% group_by(K, migration_type, migration_edge_only) %>% filter(NumCells == max(NumCells)) summarise(mean(Generation))
library(dplyr)
data %>% group_by(K, migration_type, migration_edge_only) %>% filter(NumCells == max(NumCells)) summarise(mean(Generation))
data %>% group_by(K, migration_type, migration_edge_only) %>% filter(NumCells == max(NumCells)) %>% summarise(mean(Generation))
data %>% group_by(K, migration_type, migration_edge_only) %>% filter(NumCells == max(NumCells)) %>% summarise(median(Generation))
data %>% group_by(K, migration_type, migration_edge_only) %>% filter(NumCells == max(NumCells)) %>% summarise(MedGen = median(Generation), MedBirthRate = median(MeanBirthRate))
data %>% group_by(K, migration_type, migration_edge_only) %>% filter(NumCells == max(NumCells)) %>% summarise(MedianGen = median(Generation), MeanBirthRate = mean(MeanBirthRate))
