#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(1, 100, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
plot(CumulativeCount ~ InverseFrequency, type = "l", xaxt = "n", ylab = "cumulative count", ...)
axis(1, at = InverseFrequency, labels = 1 / InverseFrequency)
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(1, 100, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
plot(CumulativeCount ~ InverseFrequency, type = "l", xaxt = "n", ylab = "cumulative count", ...)
InverseFrequency_labels <- seq(1, 100, length = 5)
axis(1, at = InverseFrequency_labels, labels = 1 / InverseFrequency_labels)
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(1, 100, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
plot(CumulativeCount ~ InverseFrequency, type = "l", xaxt = "n", ylab = "cumulative count", ...)
InverseFrequency_labels <- (0:5)*20
axis(1, at = InverseFrequency_labels, labels = 1 / InverseFrequency_labels)
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
rm(plot_cum_dist)
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(4, 8, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
plot(CumulativeCount ~ InverseFrequency, xaxt = "n", ylab = "cumulative count", ...)
InverseFrequency_labels <- 1/c(0.25, 0.2, 0.15, 0.12)
axis(1, at = InverseFrequency_labels, labels = paste0("1/", InverseFrequency_labels))
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
1/c(0.25, 0.2, 0.15, 0.12)
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(4, 8, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
plot(CumulativeCount ~ InverseFrequency, xaxt = "n", ylab = "cumulative count", ...)
InverseFrequency_labels <- c(0.25, 0.2, 0.15, 0.12)
axis(1, at = 1/InverseFrequency_labels, labels = paste0("1/", InverseFrequency_labels))
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
1/c(0.25, 0.2, 0.15, 0.12)
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(4, 9, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
plot(CumulativeCount ~ InverseFrequency, xaxt = "n", ylab = "cumulative count", ...)
InverseFrequency_labels <- c(0.25, 0.2, 0.15, 0.12)
axis(1, at = 1/InverseFrequency_labels, labels = paste0("1/", InverseFrequency_labels))
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
1/0.11
1/0.115
1/0.12
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
?plot
check()
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
install()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
#'
#' @return plot displyed on screen
#'
#' @export
#'
#' @importFrom TeachingDemos subplot
#'
#' @examples
#' plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_cum_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df1 <- read_delim_special(file)
if("Generation" %in% colnames(df1)) {
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
}
cum_count <- function(df, d) {
indices <- which(df$Frequency > d)
if(length(indices) == 0) return(0)
else return(sum(df[indices, "Count"]))
}
InverseFrequency <- seq(1/0.5, 1/0.1, by = 0.1)
CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
if(max(CumulativeCount) > 0) {
min_y <- 0
max_y <- max(CumulativeCount)
}
else {
min_y <- 0
max_y <- 1
}
plot(CumulativeCount ~ InverseFrequency, xaxt = "n", ylim = c(min_y, max_y), ylab = "cumulative count", ...)
InverseFrequency_labels <- c(0.5, 0.25, 0.15, 0.1)
axis(1, at = 1/InverseFrequency_labels, labels = paste0("1/", InverseFrequency_labels))
# InverseFrequency <- seq(1, 10, by = 0.1)
# CumulativeCount <- sapply(1/InverseFrequency, cum_count, df = df1)
#
# subplot(plot(CumulativeCount ~ InverseFrequency, xlab = "", ylab = "", type = "l"),
#         x = 'topleft', inset = 0.05)
}
plot_cum_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
check()
rm(plot_cum_dist)
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
rm(plot_cum_dist)
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 50, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 100, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
#' @import dplyr
#' @importFrom readr read_delim
#' @importFrom grDevices dev.off
#' @importFrom grDevices pdf
#' @importFrom grDevices png
#' @importFrom graphics par
#' @importFrom graphics text
#'
#' @examples
#' plot_all_charts(system.file("extdata", "", package = "demonanalysis", mustWork = TRUE))
plot_all_charts <- function(path, output_filename = NA, file_type = "png", output_dir = NA, max_size = NA, generation = NA) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 1000, height = 1000, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 10, height = 10)
}
par(mfrow = c(4, 4))
par(mgp = c(2.2, 1, 0))
par(mar = c(3.8, 3.8, 0.8, 0.8))
files_list <- c("output_allele_counts.dat", "output_driver_allele_counts.dat", "output_genotype_counts.dat", "output_driver_genotype_counts.dat")
axis_lab <- c("mutation", "driver mutation", "genotype", "driver genotype")
axis_lab2 <- c("clone", "driver clone", "genotype", "driver genotype")
for(i in 1:4) {
df1 <- read_delim_special(paste0(path, files_list[i]))
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
# plot 1:
plot_counts(paste0(path, files_list[i]), xlab = paste0(axis_lab[i], " frequency"))
if(length(df1) > 1) div_alleles <- round(quadratic_diversity(df1[, c("Frequency", "Count")], 0.025, threshold = 0.1), 2)
else div_alleles <- ""
if(length(df1) > 1) text(1, 9, paste0("modes = ", div_alleles), pos = 2)
# plot 2:
plot_logit_freq_dist(paste0(path, files_list[i]), generation = generation, xlab = paste0(axis_lab[i], " frequency"))
# plot 3:
if(is.na(max_size)) plot_first_inc_moment(df1$Frequency, df1$Count, xlim = c(0, 1), xlab = paste0(axis_lab[i], " frequency"))
else plot_first_inc_moment(df1$Size, df1$Count, xlab = paste0(axis_lab2[i], " size"), xlim = c(0, max_count))
# plot 4:
plot_cum_dist(paste0(path, files_list[i]), generation = generation, xlab = paste0("inverse ", axis_lab[i], " frequency"))
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
#' @import dplyr
#' @importFrom readr read_delim
#' @importFrom grDevices dev.off
#' @importFrom grDevices pdf
#' @importFrom grDevices png
#' @importFrom graphics par
#' @importFrom graphics text
#'
#' @examples
#' plot_all_charts(system.file("extdata", "", package = "demonanalysis", mustWork = TRUE))
plot_all_charts <- function(path, output_filename = NA, file_type = "png", output_dir = NA, max_size = NA, generation = NA) {
if(substr(path, nchar(path), nchar(path)) != "/") path <- paste0(path, "/")
if(!is.na(output_dir)) if(substr(output_dir, nchar(output_dir), nchar(output_dir)) != "/") output_dir <- paste0(output_dir, "/")
if(!is.na(output_filename) & !is.na(output_dir)) {
if(file_type == "png") png(paste0(output_dir,output_filename,".png"), width = 1000, height = 1000, res = 100)
else pdf(paste0(output_dir,output_filename,".pdf"), width = 10, height = 10)
}
par(mfrow = c(4, 4))
par(mgp = c(2.2, 1, 0))
par(mar = c(3.8, 3.8, 0.8, 0.8))
files_list <- c("output_allele_counts.dat", "output_driver_allele_counts.dat", "output_genotype_counts.dat", "output_driver_genotype_counts.dat")
axis_lab <- c("mutation", "driver mutation", "genotype", "driver genotype")
axis_lab2 <- c("clone", "driver clone", "genotype", "driver genotype")
for(i in 1:4) {
df1 <- read_delim_special(paste0(path, files_list[i]))
if(is.na(generation)) generation <- max(df1$Generation)
df1 <- filter(df1, Generation == generation)
# plot 1:
plot_counts(paste0(path, files_list[i]), xlab = paste0(axis_lab[i], " frequency"))
if(length(df1) > 1) div_alleles <- round(quadratic_diversity(df1[, c("Frequency", "Count")], 0.025, threshold = 0.1), 2)
else div_alleles <- ""
if(length(df1) > 1) text(1, 9, paste0("modes = ", div_alleles), pos = 2)
# plot 2:
plot_logit_freq_dist(paste0(path, files_list[i]), generation = generation, xlab = paste0(axis_lab[i], " frequency"))
# plot 3:
if(is.na(max_size)) plot_first_inc_moment(df1$Frequency, df1$Count, xlim = c(0, 1), xlab = paste0(axis_lab[i], " frequency"))
else plot_first_inc_moment(df1$Size, df1$Count, xlab = paste0(axis_lab2[i], " size"), xlim = c(0, max_size))
# plot 4:
plot_cum_dist(paste0(path, files_list[i]), generation = generation, xlab = paste0("inverse ", axis_lab[i], " frequency"))
}
if(!is.na(output_filename) & !is.na(output_dir)) dev.off()
}
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
rm(plot_all_charts)
check()
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, output_filename = "all_charts_size", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
plot_all_charts(path, output_filename = "all_charts_size", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 50, output_filename = "all_charts_size50", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_logit_freq_dist(system.file("extdata", "output_allele_counts.dat",
package = "demonanalysis", mustWork = TRUE))
path2
plot_logit_freq_dist(paste0(path2, "output_allele_counts.dat"))
plot_logit_freq_dist(paste0(path2, "/output_allele_counts.dat"))
plogis(-11)
plogis(-12)
plogis(-13)
plogis(-14)
-14 + 0:80 * 24.0 / 78
plogis(-14 + 0:80 * 24.0 / 78)
plogis(-14 + 0:80 * 26.0 / 78)
plogis(-14 + 0:80 * 25.0 / 78)
#' @export
#' @import dplyr
#' @importFrom stats plogis
#' @importFrom stats qlogis
#' @importFrom graphics axis
#' @importFrom graphics lines
#'
#' @examples
#' plot_logit_freq_dist(system.file("extdata", "output_allele_counts.dat",
#' package = "demonanalysis", mustWork = TRUE))
plot_logit_freq_dist <- function(file, generation = NA, ...) {
if(!file.exists(file)) {
warning(paste0(file, " not found"))
plot(0, type = 'n', axes = FALSE, ann = FALSE)
return(NA)
}
df <- read_delim_special(file)
if("Generation" %in% colnames(df)) {
if(is.na(generation)) generation <- max(df$Generation)
df <- filter(df, Generation == generation)
}
df <- filter(df, Frequency < 1, Frequency > plogis(-14))
logit_breaks <- plogis(-14 + 0:100 * 26 / 100)
hist <- with(df, hist(rep(x = Frequency, times = Count), plot = FALSE, breaks = logit_breaks))
plot(log10(hist$density) ~ qlogis(hist$mids),
xaxt = "n", yaxt = "n",
xlim = c(qlogis(1E-6), qlogis(0.9999)),
ylim = c(-6, 6),
ylab = "density", ...)
xshort <- c(1E-4, 1E-2, 0.5, 0.99, 0.9999)
axis(1, at = qlogis(xshort), labels = xshort)
yshort <- -4:10
axis(2, at = yshort, labels = 10^yshort)
xlong <- plogis(seq(-8, -1, length = 100))
lines(-1.5+log10(1/xlong^2) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
xlong <- plogis(seq(1, 8, length = 100))
lines(-1.5+log10(1/((xlong-1)*log10(1-xlong))) ~ qlogis(xlong), col = "black", lty = 2, lwd = 2)
}
plot_logit_freq_dist(paste0(path2, "/output_allele_counts.dat"))
check()
plot_all_charts(path, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
rm(plot_logit_freq_dist)
plot_all_charts(path, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_logit_freq_dist(paste0(path2, "/output_allele_counts.dat"))
plot_all_charts(path2, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, max_size = 20, output_filename = "all_charts_size20", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts_size", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
check()
plot_all_charts(path2, max_size = 20, output_filename = "all_charts_size20", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, max_size = 100, output_filename = "all_charts_size100", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
plot_all_charts(path2, output_filename = "all_charts", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
df_test <- data.frame(size = 1:20, count = exp(-(1:20)))
plot_first_inc_moment(df_test$size, df_test$count)
plot_first_inc_moment(df_test$size, df_test$count, max_size = 20)
df_test_censored <- filter(df_test, size <=10)
plot_first_inc_moment(df_test_censored$size, df_test_censored$count, max_size = 20)
plot_first_inc_moment(paste0(path2, "/output_allele_counts.dat"))
df1 <- read_delim_special(paste0(path2, "/output_allele_counts.dat"))
df1 <- filter(df1, Generation == max(Generation))
plot_first_inc_moment(df1$Size, df1$Count, xlab = "clone size", max_size = 100)
df1_censored <- filter(df1, Size <= 60)
plot_first_inc_moment(df1_censored$Size, df1_censored$Count, xlab = "clone size", max_size = 100)
df1_censored <- filter(df1, Size <= 100)
plot_first_inc_moment(df1_censored$Size, df1_censored$Count, xlab = "clone size", max_size = 100)
plot_all_charts(path2, max_size = 1000, output_filename = "all_charts_size1000", output_dir = "/Users/rnoble/Documents/MontpellierDocuments/Models/Demon/EulerPlots/May8thVoter")
2^13
